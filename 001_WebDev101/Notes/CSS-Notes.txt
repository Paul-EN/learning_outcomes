#Notes for CSS portion of - The Odin Project | Web Developer 101 | HTML and CSS Basics - by Codecademy

CSS
-Stands for Cascading Style Sheets, is a language that web developers use to style the HTML content on a web page. If you're interested in modifying colors, font types, font sizes, shadows, images, element positioning, and more, CSS is the tool for the job.
-Although CSS is a different language than HTML, it's possible to write CSS code directly within HTML code using inline styles.

style
-Using the style attribute, you can give HTML elements CSS qualities.
-Example:
    <p style="color: red;">I'm learning to code!</p>
    to add more than one style to a single element, simple add it after the ;
    <p style="color: red; font-size: 20px;">I'm learning to code!</p>

<style> tag
-Although you could get away with simply using the style attribute directly with the html elements, it would quickly become unmanageable, as you would have to add it to every element individually.
-For this, we have the <style></style> tags, which allow to set up the styles for many elements at a time.
-Example:
    <head>
      <style>
        p {
          color: red;
          font-size: 20px;
          }
      </style>
    </head>
    This example would change the color and font size of all paragraph text.

Keeping HTML and CSS separate
-It is recommended that the CSS code be kept separate from the HTML in order to preserve the readability and maintainability of each file.
-In order to do this, we create a separate file with the .css file extension.
-Ex: style.css
-So that the html file can recognize the css file, we need to link them together. For this we need to set up a <link> element that uses specific attributes: href, type (with text/css value), and rel (with stylesheet value).
-Example:
    <link href="./style.css" type="text/css" rel="stylesheet">

Tag Name
-In CSS you can select HTML elements using their element's tag name. The tag name is the word (or character) between the HTML angle brackets.
-Ex:
    The tag name for the paragraph element <p> is simply p
-Ex:
    p {

    }
    In this example, all paragraph elements will be selected using a CSS selector. The selector in this case is p. Note the CSS selector matches the HTML tag for that element, but without the angle brackets. After the selector, we must add the curly braces, which is where the CSS properties will go.

Class Name
-CSS is also able to select elements according to class name.
-Ex:
    <p class="brand">Sole Shoe Company</p>
    To select for this class we simply type it in the CSS file as:
    .brand {

    }
    Note the . at the beginning of the class. This indicates that the selector is for class.

Multiple Classes
-It is possible to assign multiple classes to a single HTML element.
-For example, suppose we create two CSS styles:
    .green {
      color: green;
    }

    .bold {
      font-weight: bold;
    }
    To assign both these CSS styles to an HTML element, we would write it as such:
    <h1 class="green bold"> ... </h1

ID Name
-If an HTML element needs to be styled uniquely (no matter what classes are applied to the element), we can add an ID to the element. To add an ID to an element, the element needs an id attribute.
-Ex:
    <h1 id="large-title"> ... </h1>
-Then, CSS can select HTML elements by their id attribute. To select an id element, CSS prepends the id name with a hashtag (#).
-Ex:
    When styling for a specific id, we write
    #large-title {

    }

Classes and IDs
-CSS can select HTML element by their tag, class, and ID. CSS classes and IDs have different purposes, which can affect which one you use to style HTML elements.
-CSS classes are meant to be reused over many elements and can be mixed.
-CSS IDs are meant to style only one element. IDs also override the styles of tags and classes.
-Since IDs override class and tag styles, they should be used sparingly and only on elements that need to always appear the same.

Specificity
-Specificity is the order by which the browser decides which CSS styles will be displayed.
-As best practice in CSS is to style elements while using the lowest degree of specificity, so that if an element needs a new style, it is easy to override.
-IDs are the most specific selector in CSS, followed by classes, and finally, tags.
-Suppose we had a tag styling that set the color of the text to whatever color. If we then added a class styling (that was used in a tag that was already styled), that class styling would override the tag styling. If we then added an ID styling, that ID styling would override both the class and tag styling.
-The only way to override an ID is to add another ID with additional styling.
-Attempt to style first with a tag selector, if not possible, then the class, and if that isn't possible, then the ID selector.

Chaining Selectors
-When writing CSS rules, it's possible to require an HTML element to have two or more CSS selectors at the same time.
-This is done by combining multiple selectors, which we will refer to as chaining. For instance, if there was a .special class for h1 elements, the CSS would look like:
    h1.special {

    }
    The code above would select only the h1 elements that have a class of special. If a p element also had a class of special, the rule in the example would not style the paragraph.

Nested Elements
-In addition to chaining selectors to select elements, CSS also supports selecting elements that are nested within other HTMl elements. For instance, consider the following HTML:
    <ul class="main-list">
      <li> ... </li>
      <li> ... </li>
      <li> ... </li>
    </ul>
    The nested <li> elements are selected with the following CSS:
    .main-list li {

    }
    In the example above, the .main-list selects the .main-list element (the unordered list element). The nested <li> are selected by adding li to the selector, separated by a space, resulting in .main-list li as the final selector (note the space in the selector).
-Selecting elements in this way can make our selectors even more specific by making sure they appear in the context we expect.
-CSS selectors that target nested elements will override other more generic selectors.

Important
-There is one thing that is even more specific than IDs: !important.
-!important can be applied to specific attributes insted of full rules. It will override any style no matter how specific it is. As a result, it should almost never be used. Once !important is used, it is very hard to override.
-Ex:
    p {
      color: blue !important;
    }

    .main p {
      color: red;
    }
    In this example, despite there already being a selector targeting a nested element, because of the !important marker, the color styling of p will take precedence over any other styling.

Multiple Selectors
-In order to make CSS more concise, it's possible to add CSS styles to multiple CSS selectors all at once. This prevents writing repetitive code.
-Ex:
    h1 {
      font-family: Georgia;
    }

    .menu {
      font-family: Georgia;
    }
    Instead of writing font-family: Georgia twice for two selectors, we can separate the selctors by a comma to apply the same style to both, like this:
    h1,
    .menu {
      font-family: Georgia;
    }

========================================================================================================

    Review CSS Selectors

    Throughout this lesson, you learned how to select HTML elements with CSS and apply styles to them. Let's review what you learned:

        1. CSS can change the look of HTML elements. In order to do this, CSS must select HTML elements, then apply styles to them.
        2. CSS can select HTML elements by tag, class, or ID.
        3. Multiple CSS classes can be applied to one HTML element.
        4. Classes can be reusable, while IDs can only be used once.
        5. IDs are more specific than classes, and classes are more specific than tags. That means IDs will override any styles from a class, and classes will override any styles from a tag selector.
        6. Multiple selectors can be chained together to select an element. This raises the specificity, but can be necessary.
        7. Nested elements can be selected by separating selectors with a space.
        8. The !important flag will override any style, however it should almost never be used, as it is extremely difficult to override.
        9. Multiple unrelated selectors can receive the same styles by separating the selector names with commas.

========================================================================================================

CSS Structure
-To style an HTML element using CSS, you need to write a CSS declaration inside the body of a CSS selector.
    h1 {
      color: blue;
    }
    The example above selects the <h1> element. Inside of the selector's body, we typed color: blue. This line is referred to as a CSS declaration. CSS declarations consist of a property and a value.

Property and Value
-Property: The property you'd like to style of that element (i.e., size, color, etc.).
-Value: The value of the property (i.e., 18px for size, blue for color, etc.).
    In the previous example, the property is color, and the value is blue.

font-family
-'font-family' is the property that specifies that you want to set the... font. Then followed by a colon, space, and then the name of the font (within "" if more than two words) and a semi-colon.
-Website for various CSS fonts: http://www.cssfontstack.com/
-Example:
    h1 {
      font-family: Helvetica;
    }

font-size
-'font-size', similar to font-family, except it changes the size of the typeface.
-Example:
    p {
      font-size: 18px;
    }

font-weight
-'font-weight' property controls how bold or thin text appears. 'normal' can also be used for a value.
-Example:
    p {
      font-weight: bold;
    }

text-align
-By default, text always appears on the left side of the browser. To align text differently, we can use the property 'text-align'.
-'text-align' has three different values: left, center, right.
-Example:
    p {
      text-align: right;
    }
    Sets all the font of selector to the right side of the web page.

Color
-It's important to make two distinctions about color. Color can affect the following deign aspects:
    Foreground color
    Background color
-Foreground color is the color that an element appears in. For example, when a heading is styled to appear green, the foreground color of the heading has been styled.
-Conversely, when a heading is styled so that its background appears yellow, the background color of the heading has been styled.
-In CSS, these two design aspects can be styled with the following two properties:
    color - this property styles an element's foreground color
    background-color - this property styles an element's background color
-Example:
    h1 {
      color: red
      background-color: blue;
    }

Opacity
-Opacity is the measure of how transparent an element is. It's measured from 0 to 1, with 1 representing 100%, or fully visible and opaque, and 0 representing 0%, or fully invisible.
-Opacity can be used to make elements fade into others for a nice overlay effect. To adjust the opacity of an element, the syntax looks like this:
    .overlay {
      opacity: 0.5;
    }

Background Image
-CSS has the ability to change the background of an element. One option is to make the background of an element an image. This is done through the CSS property background-image. Its syntax looks like this:
    .main-banner {
      background-image: url("https://www.example.com/image.jpg");
    }
    The url can be a file within your project, or it can be a link to an external site.

========================================================================================================

    Review Visual Rules

    Incredible work! You used CSS to alter text and images throughout a website. Throughout this lesson, you learned concepts including:

    1. CSS declarations are structured into property and value pairs.
    2. The font-family property defines the typeface of an element.
    3. font-size controls the size of text displayed.
    4. font-weight defines how thin or thick text is displayed.
    5. The text-align property places text in the left, right, or center of its parent container.
    6. Text can have two different color attributes: color and background-color. color defines the color of the text, while background-color defines the color behind the text.
    7. CSS can make an element transparent with the opacity property.
    8. CSS can also set the background of an element to an image with the background-image property.

========================================================================================================

Intro Box Model
-Browsers load HTML elements with default position values. This often leads to an unexpected and unwanted user experience, while limiting the views you can create.
-If you have used HTML and CSS, you have unknowingly seen aspects of the box model. For example, if you have set the background color of an element, you may have noticed that the color was appied not only to the area directly behind the element, but also to the area to the right of the element. Also, if you have aligned text, you know it is aligned relative to something. What is that something?
-All elements on a web page are interpreted by the browser as "living" inside of a box. This is what is meant by the box model.
-For example, when you change the background color of an element, you change the background color of its entire box.
-Example:
    ================================================
    |                     margin                   |
    |   ========================================   |
    |   |                 border               |   |
    |   |   ================================   |   |
    |   |   |            padding           |   |   |
    |   |   |   =========================  |   |   |
    |   |   |   |        content*       |  |   |   |*[height]
    |   |   |   =========================  |   |   |
    |   |   ================================   |   |
    |   ========================================   |
    ================================================
                        *[width]

-Width and height: Specifies the width and height of the content area
-Padding: Specifies the amount of space between the content area and the border
-Border: Specifies the thickness and style of the border surrounding the content area and padding
-Margin: Specifies the amount of space between the border and the outside edge of the element

Borders
-A border is a line that surrounds an element, like a frame around a painting.
-Borders can be set with a specific width, style, and color.
    1. width: The thickness of the border. A border's thickness can be set in pixels or with one of the following keywords: thin, medium, or thick.
    2. style: The design of the border. Web browsers can render any of 10 different styles. Some of these styles include: none, dotted, and solid.
    3. color: The color of the border. Web browsers can render colors using a few different formats, including 140 built-in color keywords.
-Excample:
    p{
      border: 3px solid coral;
    }
-In the example above, the border has a width of 3 pixels, a style of solid and a color of coral. All three properties are set in one line of code.
-The default border is medium none color, where color is the current color of the element. If width, style, or color are not set in the CSS file, the web browser assigns the default value for that priority.
-Example:
    p.content-header {
      height: 80px;
      width: 240px;
      border: solid coral;
    }
-In this example, the border style is set to solid and the color is set to coral. The width is not set, so it defaults to medium.

Border Radius
-Ever since we revealed the borders of boxes, you may have noticed that the borders highlight the true shape of an element's box: square. Thanks to CSS, a border doesn't have to be square.
-You can modify the corners of an element's border box with the border-radius property
-Example:
    div.container {
      border: 3px solid rgb(22, 77, 100);
      border-radius: 5px;
    }
-The code in the example above will set all four corners of the border to a radius of 5 pixels (i.e. the same curvature that a circle with radius 5 pixels would have).
-You can create a border that is a perfect circle by setting the radius equal to the height of the box, or to 100%.
-Example:
    div.container {
      height: 60px;
      width: 60px;
      border: 3px solid rgb(22, 77, 100);
      border-radius: 100%;
    }
-The code in the example above creates a div that is a perfect circle.

Padding I
-The space between the contents of a box and the borders of a box is known as padding.
-Padding is like the space between a picture and the frame surrounding it. In CSS, you can modify this space with the padding property.
-Example:
    p.content-header {
      border: 3px solid coral;
      padding: 10px;
    }
-The example above puts 10 pixels of space between the content of the paragraph (the text) and the borders, on all four sides.
-The padding property is often used to expand the background color and make content look less cramped.
-Each side can be padded individually through the following properties:
    1. padding-top
    2. padding-right
    3. padding-bottom
    4. padding-left

Padding II
-Another implementation of the padding property lets you specify exactly how much padding there should be on each side of the content in a single declaration.
-Example:
    p.content-header {
      border: 3px solid grey;
      padding: 6px 11px 4px 9px;
    }
-The four values 6px 11px 4px 9px correspond to the amount of padding in a clockwise rotation. In order, it specifies the amount of padding on the top (6 pixels), right (11 pixels), bottom (4 pixels), and left (9 pixels) side of the content.
-When using this implementation of padding property, we must specify a padding value for all four sides of the element.
  -However, if the top and bottom values for padding will equal each other, and the left and right values for padding will also equal each other, you can use the following shortcut:
    p.content-header {
      padding: 5px 10px;
    }
    The firt value, 5px, sets the padding value for the top and bottom sides of the content. The second value, 10px, sets the padding value for the left and right sides of the content.

Margins I
-The fourth and final component of the box model is margin.
-Margin refers to the space directly outside of the box. The margin property is used to specify the size of this space.
-Example:
    p {
     border: 1px solid aquamarine;
     margin: 20px;
    }
-The code above will place 20px of space on the outside of the paragraph's box on all four sides. This means that other HTML elements on the page cannot come within 20 pixels of the paragraph's border
-Similar in practice to the padding property.
-The margin of each side can be set individually with:
    1. margin-top
    2. margin-right
    3. margin-bottom
    4. margin-left

-margin values follow the similar implementation methods as padding.
-Example:
             top right bottom left (clockwise)
    p {
     margin: 6px 10px 5px 12px;
    }
    and if top and bottom are equal and left and right are equal...
    p {
     margin: 6px 12px
    }

Auto
-The margin property also lets you center content. However, you must follow a few syntax requirements. -Example:
    div {
      margin: 0 auto;
    }
-The above example will center the divs in their containment elements. The 0 sets the top and bottom margins to 0 pixels. The auto value instructs the browser to adjust the left and right margins until the element is centered within its containment element.
-The div elements in the example above should center within an element that fills the page, but this doesn't occur. Why?
  -In order to center an element, a width must be set for that element. Otherwise, the width of the div will be automatically set to the full width of its containing element, like the <body>, for example. It's not possible to center an element that takes up the full width of the page.
  -Ex:
    div.headline {
      width: 400px;
      margin: 0 auto;
    }

Margin Collapse
-As you have seen, padding is space added inside an element's border, while margin is space added outside an element's border. One additional difference is that top and bottom margins, also called vertical margins, collapse, while top and bottom padding does not.
-Horizontal margins (left and right), like padding, are always displayed and added together. For example, if two divs with ids #div-one and #div-two, are next to each other, they will be as far apart as the sum of their adjacent margins.
-Example:
    #img-one {
      margin-right: 20px;
    }
    #img-two {
      margin-left: 20px;
    }
    In this example, the space between the #img-one and #img-two borders is 40 pixels. The right margin of #img-one (20px) and the left margin of #img-two (20px) add to make a total margin of 40 pixels.
-Unlike horizontal margins, vertical margins do not add. Instead, the larger of the two vertical margins sets the distance between adjacent elements.
-Example:
    #img-one {
      margin-bottom: 30px;
    }
    #img-two {
      margin-top: 20px;
    }
    In this example, the vertical margin between the #img-one and #img-two elements is 30 pixels. Although the sum of the margins is 50 pixels, the margin collapses so the spacing is only dependent on the #img-one bottom margin.
-It may be helpful to think of collapsing vertical margins as a short person trying to push a taller person. The tall person has longer arms and can easily push the short person, while the person with short arms cannot reach the person with long arms.

Minimum and Maximum Height and Width
-Because a web page can be viewed through displays of differing screen size, the content on the web page can suffer from those changes in size. To avoid this problem, CSS offers two properties that can limit how narrow or how wide an element's box can be sized to.
    1. min-width: this property ensures a minimum width of an element's box
    2. max-width: the property ensures a maximum width of an element's box
-Example:
    p{
      min-width: 300px;
      max-width: 600px;
    }
    In the example above, the width of all paragraphs will not shrink below 300 pixels, nor will the width exceed 600 pixels.
-Content, like text, can become difficult to read when a browser window is narrowed or expanded. These two properties ensure that content is legible by limiting the minimum and maximum widths of an element.
-Similarly, you can also limit the minimum and maximum height of an element with:
    1. min-height: this property ensures a minimum height for an element's box
    2. max-height: this property ensures a maximum height of an element's box
-Example:
    p {
      min-height: 150px;
      max-height: 300px;
    }
    In the example above, the height of all paragraphs will not shrink below 150 pixels and the height will not exceed 300 pixels.
-If the contents of an element's box, max-height, property is set too low, it's possible for the content to spill outside of the box, resulting in content that is not legible.

Overflow
-Taking into account all the dimensions set for elements add up to a corresponding size.
-There will be times when these components result in an element that is larger than the parent's containing area.
-In order to ensure that we can view all of an element that is larger than its parent's containing area we use the overflow property.
-The overflow property controls what happens to content that spills, or overflows, outside its box. It can be set to one of the following values:
    1. hidden - when set to this value, any content that overflows will be hidden from view
    2. scroll - when set to this value, a scrollbar will be added to the element's box so that the rest of the content can be viewed by scrolling
    3. when set to this value the overflow content will be displayed outside of the containing element. Note, this is the default value.
-Example:
    p {
      overflow: scroll;
    }
    If any of the paragraph content overflows (perhaps a user resizes their browser window), a scrollbar will appear so that users can view the rest of the content.
-The overflow property is set on a parent element to instruct a web browser how to render child elements. For example, if a div's overflow property is set to scroll, all children of this div will display overflowing content with a scroll bar.

Resetting Defauts
-All major web browsers have a default stylesheet they use in the absence of an external stylesheet.
-These default stylesheets are known as user agent stylesheets. In this case, the term "user agent" is a technical term for the browser.
-User agent stylesheets often have default CSS rules that set default values for padding and margin. This affects how the browser displays HTML elements, which can make it difficult for a developer to design or style a web page.
-Many developers choose to reset these default values so they can truly work with a clean slate.
-Example:
    * {
      margin: 0;
      padding: 0;
    }
    The code above resets the default margin and padding values of all HTML elements. It is often the first CSS rule in an external stylesheet.
-Note that both properties are both set to 0. When these properties are set to 0, they do not require a unit of measurement.

Visibility
-Elements can be hidden from view with the visibility property
-The visibility property can be set to one of the following values:
    1. hidden: hides an element
    2. visible: displays an element
-Example:
    In HTML
    <ul>
      <li>Explore</li>
      <li>Connect</li>
      <li class="future">Donate</li>
    </ul>
    and in CSS
    .future {
      visibility: hidden;
    }
    In the example above, the list item with a class of future will be hidden from view in the browser.
-Keep in mind, however, that users can still view the contents of the list item (e.g. Donate) by viewing the source code in their browser. Furthermore, the web page will only hide the contents of the element. It will still leave an empty space where the element is intended to display.
-Note: What's the difference between display: none and visibility: hidden? An element with display: none will be completetly removed from the web page. An element with visibility: hidden, however, will not be visible on the web page, but the space reserved for it will.

========================================================================================================

Review

In this lesson, we covered the four properties of the box model: height and width, padding, borders, and margins. Understanding the box model is an important step towards learning more advanced HTML and CSS topics. Let's take a minute to review what you learned.

    1. The box model comprises a set of properties used to create space around and between HTML elements.
    2. The height and width of a content area can be set in pixels or percentage.
    3. Borders surround the content area and padding of an element. The color, style, and thickness of a border can be set with CSS properties.
    4. Padding is the space between the content area and the border. It can be set in pixels or percent.
    5. Margin is the amount of spacing outside of an element's border.
    6. Horizontal margins add, so the total space between the borders of adjacent elements is equal to the sum of the right margin of one element and the left margin of the adjacent element.
    7. Vertical margins collapse, so the space between vertically adjacent elements is equal to the larger margin.
    margin: 0 auto horizontally centers an element inside of its parent content area, if it has a width.
    8. The overflow property can be set to display, hide, or scroll, and dictates how HTML will render content that overflows its parent's content area.
    9. The visibility property can hide or show elements.

========================================================================================================

Why Change the Box Model?
-The box model has an awkward limitation regarding box dimensions. This limitation is best illustrated with an example:
    <h1>Hello World</h1>
    h1 {
      border: 1px solid black;
      height: 200px;
      width: 300px;
      padding: 10px;
    }
    In the example above, a heading element's box has solid, black, 1 pixel thick borders. The height of the box is 200 pixels, while the width of the box is 300 pixels. A padding of 10 pixels has also been set on all four sides of the box's content.
-Unfortunately, under the current box model, the border thickness and the padding will affect the dimensions of the box.
-The 10 pixels of padding increases the height of the box to 220 pixels and the width to 320 pixels. Next, the 1-pixel thick border increases the height to 222 pixels and the width to 322 pixels.
-Under this box model, the border thickness and padding are added to the overall dimensions of the box. This makes it difficult to accurately size a box. Over time, this can also make all of the web page's content difficult to position and manage.

Box Model: Content-Box
-Many properties in CSS have a default value and don't have to be explicitly set in the stylesheet.
-For example, the default font-weight of text is normal, but this property-value pair is not typically specified in a stylesheet.
-The same can be said about the box model that browsers assume. In CSS, the box-sizing property controls the type of box model the browser should use when interpreting a web page.
-The default value of this property is content-box. This is the same box model that is affected by border thickness and padding.
              _____________________________________________________________
              |                                                           |
              |                ___________________________                |
              |                |                         |                |
  left        |     left       |      Content Width      |    right       |     right
  border ->   |    padding     |          158px          |   padding      |  <- border
   1px        |     20px       |                         |    20px        |      1px
              |                |_________________________|                |
              |                                                           |
              |                                                           |
              |                                                           |
              |___________________________________________________________|
              {-------------------actual rendered width-------------------}
                                          200px
           width + padding + border = actual rendered width of an element's box

Box Model: Border-Box
-Fortunately, we can reset the entire box model and specify a new one: border-box.
-Example:
    * {
      box-sizing: border-box;
    }
    The code in the example above resets the box model to border-box for all HTML elements. This new box model avoids the dimensional issues that exist in the former box model you learned about.
-In this box model, the height and width of the box will remain fixed. The border thickness and padding will be included inside of the box, which means the overall dimensions of the box do not change.
-Example:
    <h1>Hello World</h1>
    and in CSS
    * {
      box-sizing: border-box;
    }
    h1 {
      border: 1px solid black;
      height: 200px;
      width: 300px;
      padding: 10px;
    }
    In the example above, the height of the box would remain at 200 pixels and the width would remain at 300 pixels. The border thickness and padding would remain entirely inside of the box.
-Example:
            _____________________________________________________________
            |                                                           |
            |                ___________________________                |
            |                |                         |                |
left        |     left       |      Content Width      |    right       |     right
border ->   |    padding     |          auto           |   padding      |  <- border
1px         |     20px       |                         |    20px        |     1px
            |                |_________________________|                |
            |                                                           |
            |___________________________________________________________|
            {---------width property (and actual rendered width)--------}
                                         200px

The New Box Model
    * {
      box-sizing: border-box;
    }

========================================================================================================

    Review: Changing the Box Model

    In this lesson, you learned about an important limitation of the default box model: box dimensions are affected by border thickness and padding.

    Let's review what you learned:

        1. In the default box model, box dimensions are affected by border thickness and padding.
        2. The box-sizing property controls the box model used by the browser.
        3. The default value of the box-sizing property is content-box.
        4. The value for the new box model is border-box.
        5. The border-box model is not affected by border thickness or padding.

========================================================================================================

Flow of HTML
-A browser will render the elements of an HTML document that has no CSS from left to right, top to bottom, in the same order as they exist in the document. This is called the flow of elements in HTML.
-Properties that it provides to style HTML elements, CSS includes properties that change how a browser positions elements. These properties specify where an element is located on a page, if the element can share lines with other elements, and other related attributes.
-Five properties for adjusting the position of HTML elements in the browser:
    1. position
    2. display
    3. z-index
    4. float
    5. clear
    Each of these properties will allow us to position and view elements on a web page. THey can be used in conjunction with any other styling properties you may know.

Position
-Block-level elements take up their own line of space and therefore don't overlap each other.
-The default position for block level elements is on the left side.
-The default position of an element can be changed by setting its position property. The position property can take one of four values:
    1. static - the default value (it does not need to be specified)
    2. relative
    3. absolute
    4. fixed
-It's important to understand that if you favor the default position of an HTML element, you don't need to set its position property.
-For the lesson exercise: Setting position to static does nothing. Thats because static simply refers to the default behavior.

Position: Relative
-One way to modify the default position of an element is by setting its position property to relative.
-This value allows you to position an element relative to its default static position on the web page.
-Example:
    .box-bottom {
      background-color: DeepSkyBlue;
      position: relative;
    }
-Although the code in the example above instructs the browser to expect a relative positioning of the div, it does not specify where the div should be positioned on the page.
-Example:
    .box-bottom {
      background-color: DeepSkyBlue;
      position: relative;
      top: 20px;
      left: 50px;
    }
-In the example above, the div has been positioned using two of the four offeset properties. The valid offset properties are:
    1. top - moves the element down
    2. bottom - moves the element up
    3. left - moves the element right
    4. right - moves the element left
-In the example above, the div will be moved down 20 pixels and to the right 50 pixels from its default static position.
-Think of it as setting margin in order to position the element.

Position: Absolute
-Another way of modifying the position of an element is by setting its position to absolute.
-When an element's position is set to absolute all other elements on the page will ignore the element and act like it is not present on the page.
-Example:
    .box-bottom {
      background-color: DeepSkyBlue:
      position: absolute;
      top: 20px;
      left: 50px;
    }
-In the example above, the .box-bottom div will be moved down and right from the top left corner of the view. If offset properties weren't specified, the top box would be entirely covered by the bottom box.

Position: Fixed
-When an element's position is set to absolute, as in the last example, the element will scroll out of view when a user scrolls.
-We can fix an element to a specific position on the page (regardless of user scrolling) by setting its position to fixed.
-Example:
    .box-bottom {
      background-color: DeepSkyBlue;
      position: fixed;
      top: 20px;
      left: 50px;
    }
-The div will remain fixed to its position no matter where the user scrolls on the page.
-This technique is often used for navigation bars on a web page.

Z-Index
-When boxes on a web page have a combination of different positions, the boxes (and therefore, their content) can ovverlap with each other, making the content difficult to read or consume.
-Example:
    .box-top {
      background-color: Aquamarine;
    }
    .box-bottom {
      background-color: DeepSkyBlue;
      position: absolute;
      top: 20px;
      left: 50px;
    }
-In the example above, the .box-bottom div ignores the .box-top div and overlaps it as a user scrolls.
-The z-index property controls how far "back" or how far "forward" an element should appear on the web page.
-The z-index property accepts integer values. Depending on their values, the integers instruct the browser on the order in which elements should be displayed on the web page.
-Example:
    .box-top {
      background-color: Aquamarine;
      position: relative;
      z-index: 2;
    }
    .box-bottom {
      background-color: DeepSkyBlue;
      position: absolute;
      top: 20px;
      left: 50px;
      z-index: 1;
    }
-The z-index property does not work on static elements

Inline Display
-Every HTML element has a default display value that dictates if it can share horizontal space with other elements. Some elements fill the entire browser from left to right regardless of the size of their content. Other elements only take up as much horizontal space as their content requires and can be directly next to other elements.
-There are three values for display property:
    1. inline
    2. block
    3. inline-block
-The default display for some tags, such as <em>, <strong>, and <a>, is called inline. Inline elements have a box that wraps tightly around their content, only taking up the amount of space necessary to display their content and not requiring a new line after each element.
-The height and width of these elements cannot be specified in the CSS document. For example, the text of an anchor tag will, by default, be displayed on the same line as the text inside of an emphasized element. Each of these will only be as wide as necessary to contain their content.
-Example:
    To learn more about <em>inline</em> elements, clock <a href="#">here</a>.
-In the example above, the <em> element is inline, because it displays its content on the same line as the content surrounding it, including the anchor tag.
-The CSS display property provides the ability to make any element an inline element. This includes elements that are not inline by default such as paragraphs, divs, and headings.
-Example:
    h1 {
      display: inline;
    }
-The CSS in the example above will change the display of all <h1> elements to inline. The browser will render <h1> elements on the same line as other inline elements immediately before or after them (if there are any).

Block Display
-Some elements are not displayed in the same line as the content around them. These are called block-level elements. These elements fill the entire width of the page and, unless soecified, are the height necessary to accommodate the content inside of them.
-Elements that are block-level by default include all levels of heading elements (<h1> through <h6>), <p>, <div> and <footer>.
-For a complete list of block level elements, visit
https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements
-Example:
    strong {
      display: block;
    }
-In the example above, all <strong> elements will be displayed on their own line, with no content directly on either side of them even though their contents may not fill the width of most computer screens.

Inline-Block Display
-The third value for the display property is inline-block. Inline-block display combines features of both inline and block elements. Inline-block elements can appear next to each other and we can specify their dimensions using width and height properties. Images are the best example of default inline-block elements.
-For example, div's in the CSS below will be displayed on the same line and with the specified dimensions:
    In HTML
    <div class="rectangle">
      <p>I’m a rectangle!</p>
    </div>
    <div class="rectangle">
      <p>So am I!</p>
    </div>
    <div class="rectangle">
      <p>Me three!</p>
    </div>
    and in CSS
    .rectangle {
      display: inline-block;
      width: 200px;
      height: 300px;
    }
-In the example above, there are three rectangular divs that each contain a paragraph of text. The .rectangle divs will appear inline (provided there is enough space from left to right) with a width of 200 pixels and height of 300 pixels, even though the text inside of them may not require 200 pixels by 300 pixels of space.

Float
-If you're simply interested in moving an element as far left or as far right as possible on the page, you can use the float property.
-The float property can be set to one of two values:
    1. left - this value will move, or float, elements as far left as possible
    2. right - this value will move elements as far right as possible
-Example:
    .boxes {
      width: 120px;
      height: 70px;
    }
    .box-bottom {
      background-color: DeepSkyBlue;
      float: right;
    }
-In the example above, we float the .box-bottom element to the right. This works for static and relative positioning elements. See the result of the code below:
-Floated elements must have a width specified, as in the example above. Otherwise, the element will assume the full width of its containing element, and changing the float value will not yield any visible results.

Clear
-The float property can also be used to float multiple elements at once. However, when multiple floated elements have different heights, it can affect their layout on the page. Specifically, elements can "bump" into each other and not allow other elements to properly move to the left or right.
-The clear property specifies how elements should behave when they bump into each other on the page. It can take on one of the following values:
    1. left - the left side of the element will not touch any other element within the same containnig element.
    2. right - the right side of the element will not touch any other element within the same containing element.
    3. both - neither side of the element will touch any other element within the same containing element.
    4. none - the element can touch either side.
-Example:
    div {
      width: 200px;
      float: left;
    }
    div.special {
      clear: left;
    }
-In the example above, all divs on the page are floated to the left side. The div with class special did not move all the way to the left because a taller div blocked its positioning. By setting its clear property to left, the special div will be moved all the way to the left side of the page.

========================================================================================================

Review: Layout

Great job! In this lesson, you learned how to control the positioning of elements on a web page.

Let's review what you've learned so far:

    1. The position property allows you to specify the position of an element in three different ways.
    2. When set to relative, an element's position is relative to its default position on the page.
    3. When set to absolute, an element's position can be pinned to any part of the web page, but the element will still move out of view when the page is scrolled.
    4. When set to fixed, an element's position can be pinned to any part of the web page. The element will remain in view no matter what.
    5. The z-index of an element specifies how far back or how far forward an element appears on the page.
    6. The float property can move elements as far left or as far right as possible on a web page.
    7. You can clear an element's left or right side (or both) using the clear property.

========================================================================================================

Introduction to Color
-CSS supports a wide variety of colors. These include named colors, like blue, black, and LimeGreen, along with colors described by a numeric value. Using a numeric system allows us to take advantage of the whole spectrum of colors that browsers support.
-Colors in CSS can be described in three different ways:
    1. Named colors - English words that describe colors, also called keyword colors.
    2. RGB - numeric values that describe a mix of red, green, and blue.
    3. HSL - numeric values that describe a mix of hue, saturation, and lightness.

Foreground vs Background
-It's important to make two distinctions about color. Color can affect the following design aspects:
    1. The foreground color
    2. The background color
-Foreground color is the color that an element appears in. For example, when a heading is styled to appear green, the foreground color of the heading has been styled.
-Conversely, when a heading is styled so that its background appears yellow, the background color of the heading has been styled.
-In CSS, these two design aspects can be styled with the following two properties:
    1. color - this property styles an element's foreground color
    2. background-color - this property styles an element's background color
-Example:
    h1 {
      color: Red;
      background-color: Blue;
    }
-In the example above, the text of the heading will appear in red, and the background of the heading will appear blue.

Hexadecimal
-One syntax that we can use to specify colors is called hexadecimal. Colors specified using this system are called hex colors. A hex color begins with a hash character (#) which is followed by three or six characters. The characters represent values for red, blue, and green.
-Example:
    DarkSeaGreen: #8FBC8F
    Sienna:       #A0522D
    SaddleBrown:  #8B4513
    Brown:        #A52A2A
    Black:        #000000 or #000
    White:        #FFFFFF or #FFF
    Aqua:         #00FFFF or #0FF
-In the example above, you may notice that there are both letters and numbers in the values. This is because the hexadecimal number system has 16 digits (0-15) instead of 10 (0-9) like you are used to. To represent 10-15, we use A-F.
-For a list of many different colors and their hex values, visit:
https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
-Notice that Black, White, and Aqua are all represented with both three characters and six characters. -This can be done with hex colors whose number pairs are the same characters. In the example above, Aqua can be represented as #0FF because both of the first two characters are 0 and the second and third pairs of characters are both F's. Keep in mind that all three character hex colors can be represented with six characters (by repeating each character twice) but the same is not true in reverse.
-You can include hex colors just as you would include named colors:
-Example:
    background-color: #9932cc;

RGB Colors
-There is another syntax for representing RGB values that uses decimal numbers.
-Example:
    color: rgb(23, 45, 23);
-Here, each of the three values represents a color component, and each can have a decimal number value from 0 to 255.
-The first number represents the amount of red, the second is green, and the third is blue.
-These colors are exactly the same as hex, but with a different syntax and a different number system.
-In general, hex and decimal color representations are equivalent. Which you choose is a matter of personal taste.
-It is recommended to choose one and be consistent throughtout your CSS, because it's easier to compare hex to hex and decimal to decimal.

Hex and RGB
-The RGB color system can represent many more colors than the small set of CSS named colors.
-In both hex and decimal, we have three values, one for each color. Each can  be one of 256 values. Specifically, 256 * 256 * 256 = 16,777,216. That is the amount of colors we can now represent compared to the 147 named CSS colors.

Hue, Saturation, and Lightness
-The RGB color scheme is convenient because it's very close to how computers represent colors internally. There's another equally powerful system in CSS called the hue-saturation-lightness color scheme, abbreviated as HSL.
-The syntax for HSL is similar to the decimal form of RGB, though it differs in important ways. The first number represents the degree of the hue, nd can be between 0 and 360. The second and third numbers are percentages representing saturation and lightness respectively.
-Example:
    color: hsl(120, 60%, 70%);
-Hue is the first number. It refers to an angle on a color wheel. Red is 0 degrees, Green is 120 degrees, Blue is 240 degrees, and then back to Red at 360.
-You can see an example of this color wheel here:
http://dba.med.sc.edu/price/irf/Adobe_tg/models/images/hsl_top.JPG
-Saturation refers to the intensity or purity of the color. If you imagine a line segment drawn from the center of the color wheel to the perimeter, the saturation is a point on that line segment. If you spin that line segment to different angles, you'll see how that saturation looks for different hues. The saturation increases towards 100% as the point gets closer to the edge (the color becomes more rich). The saturation decreases towards 0% as the point gets closer to the center (the color becomes more gray).
-Lightness refers to how light or dark the color is. Halfway, or 50%, is normal lightness. Imagine a sliding dimmer on a light switch that starts halfway. Sliding the dimmer up towards 100% makes the color lighter, closer to white. Sliding the dimmer down towards 0% makes the color darker, closer to black.
-HSL is convenient for adjusting colors. In RGB, making the color a little darker may affect all three color components. In HSL, that's as easy as changing the lightness value. HSL is also useful for making a set of colors that work well together by selecting various colors that have the same lightness and saturation but different hues.

Opacity and Alpha
-Opcacity - the amount of transparency
-To use opacity in the HSL color scheme, use hsla instead of hsl, and four values instead of three.
-Example:
    color: hsla(34, 100%, 50%, 0.1);
-The first three values work the same as hsl. The fourth value (which we have not seen before) is the alpha. This value is sometimes called the opacity.
-Alpha is a decimal number from zero to one.
-If alpha is zero, the color will be completely transparent. If alpha is one, the color will be opaque. The value for half transparent would be 0.5.
-You can think of the alpha value as, "the amount of the background to mix with the foreground". WHen a color's alpha is below one, any color behind it will be blended in. The blending happens for each pixel; no blurring occurs.
-The RGB color scheme has a similar syntax for opacity, rgba.
-The first three values work the same as rgb, and the last value is the alpha.
-Example:
    color: rgba(234, 45, 98, 0.33);
-Alpha can only be used with HSL and RGB colors; we cannot add the alpha calue to color: green color: #FFFFF.
-There is, however, a named color keyword for zero opacity, transparent. It's equivalent to rgba(0, 0, 0, 0). It's used like any other color keyword.
-Example:
    color: transparent;

========================================================================================================

    Color Review

    We've completed our extensive tour of the colors in CSS! Let's review the key information we've learned.

    There are four ways to represent color in CSS:

    Named colors — there are 147 named colors, which you can review here.

    Hexadecimal or hex colors
        Hexadecimal is a number system with has sixteen digits, 0 to 9 followed by "A" to "F".
        Hex values always begin with # and specify values of red, blue and green using hexademical numbers such as #23F41A.

    RGB
        RGB colors use the rgb() syntax with one value for red, one value for blue and one value for green.
        RGB values range from 0 to 255 and look like this: rgb(7, 210, 50).

    HSL
        HSL stands for hue (the color itself), saturation (the intensity of the color), and lightness (how light or dark a color is).
        Hue ranges from 0 to 360 and saturation and lightness are both represented as percentages like this: hsl(200, 20%, 50%).

    You can add opacity to color in RGB and HSL by adding a fourth value, a, which is represented as a percentage.

========================================================================================================

Font Family
-If you've ever used a formatted word processor, chances are that you probably also used a feature that allowed you change the "type of font" you were typing in. The phrase "type of font" refers to the technical term typeface, or font family.
-To change the typeface of text on your web page, you can use the font-family property.
-Example:
    h1 {
      font-family: Garamond;
    }
-In the example above, the font family for all main heading elements has been set to Garamond.
-When setting typefaces on a web page, keep the following points in mind:
    1. The font specified in a stylesheet must be installed on a user's computer in order for that font to display when a user visit the web page.
    2. You've probably noticed that we haven't been specifying a typeface in previous exercises of this course. How exactly does the browser know what typeface to use when displaying the web page? The default typeface for all HTML elements is Times New Roman.
-It's a good practice to limit the number of typefaces used on a web page to 2 or 3.
-When the name of a typeface consists of more than one word, it must be enclosed in double quotes (otherwise it will not be recognized), like so:
-Example:
      h1 {
        font-family: "Courier New";
      }

Font Weight
-You've probably noticed bold text in websites you use, especially in news or text-heavy sites. It's common to bold important headings or keywords. In CSS, we can style bold text with the font-weight property.
-If we want to bold text in a web page, we can set the font-weight to bold.
-Example:
    p {
      font-weight: bold;
    }
-If we want to ensure that text is not bold, we can set the font-weight to normal.
-Example:
    p {
      font-weight: normal;
    }
-By default, the font-weight of most text elements is set to normal. Some elements, like headers, have built-in bold styling. A good approach is to check to see if the text element has any default styling, and use the font-weight property accordingly.

Font Weight II
-The font-weight property can also be assigned a number value to style text on a numeric scale ranging from 100 to 900. Valid values are multiples of 100 within this range such as 200 or 500.
-When using numeric weights, there are a number of default font weights that we can use:
    1. 400 is the default font-weight of most text.
    2. 700 signifies a bold font-weight.
    3. 300 signifies a light font-weight.
-Example:
      header {
        font-weight: 800;
      }
      footer {
        font-weight: 200;
      }
-Here, the header would appear as a deep bold, while the footer would appear rather light.
-It's important to note that not all fonts can be assigned a numeric font-weight.
-You can look up the font you are using to see which font-weight values are available.

Font Style
-You can also italicize text with the the font-style property.
-Example:
    h3 {
      font-style: italic;
    }
The italic value causes text to appear in italics. The font-style property also has a normal value which is the default.

Word Spacing
-You can also increase the spacing between words in a body of text, technically known as word spacing.
-To do so, you can use the word-spacing property:
-Example:
    h1 {
      word-spacing: 0.3em;
    }
-The default amount of space between words is usually 0.25em. In the example above, the word spacing is set to 0.3em, which represents an increase of only 0.05em in words spacing.
-It's not common to increase the spacing between words, but it may help enhance the readability of bolded or enlarged text. Note, again, that the preferred unit is ems.

Letter Spacing
-It's possible to increase the spacing between individual letters.
-The technical term for adjusting the spacing between letters is called "kerning". Kerning can be adjusted with the letter-spacing property in CSS.
-Exmaple:
    h1 {
      letter-spacing: 0.3em;
    }
-Like word spacing, it's not common to increase the kerning in text, but sometimes it enhances the readability of uppercase text.

Text Transformation
-Text can also be styled to appear in either all uppercase or lowercase with the text-transform property.
-Example:
    h1 {
      text-transform: uppercase;
    }
-The code in the example above formats all <h1> elements to appear in uppercase, regardless of the case used for the heading within the HTML code. Alternatively, the lowercase value could be used to format text in all lowercase.
-Since text can be directly typed in all uppercase or lowercase within an HTML file, what is the point of a CSS rule that allows you to format letter case?
-Depending on the type of content a web page displays, it may make sense to always style a specific element in all uppercase or lowercase letters. For example, a website that reports breaking news may decide to format all <h1> heading elements such that they always appear in all uppercase, as in the example above. It would also avoid uppercase text in the HTML file, which could make code difficult to read.

Text Alignment
-No matter how much styling is applied to text (typeface, size, weight, etc.), text always appears on the left side of the browser.
-To move, or align, text, we can use the text-align property.
    h1 {
      text-align; right;
    }
-The text-align property can be set to one of the following three values:
    1. left - aligns text to the left hand side of the browser
    2. center - centers text
    3. right - aligns text to the right hand side of the browser

Line Height Anatomy
-Another property that we can set for text is line-height. This property modifies the leading of text.
-The diagram to the right helps illustrate exactly what the terms "leading" and "line height" mean.
-Line-height: Space between the two bottoms of rows of text
-Leading - Space between the top of the text and the bottom of the text above.

Line Height
-We often modify line-height to make text on a web page easier to read. When text is styled to appear larger, the vertical spacing between lines of text can decrease, creating text that is difficult to read, particularly in paragraphs.
-We can use the line-height property to set how tall we want the line containing our text to be, regardless of the height of the text. Line heights can take one of several values:
    1. A unitless number, such as 1.2. This number is an absolute value that will compute the line height as a ratio of the font size.
    2. A number specified by unit, such as 12px. This number can be any valid CSS unit, such as pixels, percents, ems, or rems.
-Generally, the unitless ratio value is the preferred method, since it is responsive and based exclusively on the current font size. In other words, if we change the font size, a unitless line-height would automatically readjust, whereas the pixel value would remain static.
-Example:
    p {
      line-height: 1.4;
    }

Serif and Sans Serif
-Serif - fonts that have extra details on the ends of each letter. Examples include fonts like Times New Roman or Georgia, among others.
-Sans-Serif - fonts that do not have extra details on the ends of each letter. Instead, letters have straight, flat edges, like Arial or Helvetica.

Fallback Fonts
-You can assign a second font to fall back on in the even that the browser does not have the first font installed.
-Most computers have a small set of typefaces pre-installed. This small set includes serif fonts like Times New Roman and sans-serif fonts like Arial.
-These pre-installed fonts serve as fallback fonts if the stylesheet specifies a font which is not isntalled on a user's computer.
-To use fallback fonts, the following syntax is required:
    h1 {
      font-family: "Garamond", "Times", serif;
    }
-The CSS rule above says:
    1. Use the Garamond font for all <h1> elements on the web page.
    2. If Garamond is not available, use Times font.
    3. If Garamond and Times are not available, use any serif font pre-installed on the user's computer.
-The fonts specified after Garamond are the fallback fonts (Times, serif). Fallback fonts help ensure a consistent experience for the diverse audience of users that visit a site.

Linking Fonts I
-With the number of fonts available with modern typography, it is unrealistic to expect users to have all fonts installed on their computers. New fonts are often centralized in directories made available for public use. We refer to these fonts as non-user fonts.
-Google Fonts is one such directory of thousands of open-source fonts, available for free use. Google Fonts gives us a way to retrieve the link for a single font, multiple fonts, or multiple fonts with the font-weight and font-style properties.

Linking Fonts II
-When we have the link to the font of our choice, we can add the font to the <head> section of the HTML document, using the <link> tag and the href.
    1. A single linked font, using Droid Serif as an example:
    <head>
      <link href="https://fonts.googleapis.com/css?family=Droid+Serif" type="text/css" rel="stylesheet">
    </head>
    2. Multiple linked fonts, using the Droid Serif and Playfair Display fonts as an example:
    <head>
      <link href="https://fonts.googleapis.com/css?family=Droid+Serif|Playfair+Display" type="text/css" rel="stylesheet">
    </head>
    3. Multiple linked fonts, along with weighs and styles. Here Droid Serif has font weights of 400, 700, and 700i, while Playfair Display has font weights of 400, 700, and 900i:
    <head>
      <link href="https://fonts.googleapis.com/css?family=Droid+Serif:400,700,700i|Playfair+Display:400,700,900i" rel="stylesheet">
    </head>
-Once a font is linked, we can create CSS selectors to target elements, just as we do with other fonts.

Font-Face I
-There are other ways to link non-user fonts that don't require the use of the <link> tag in the HTML document. CSS offers a way to import fonts directly into stylesheets with the @font-face property.
-To load fonts with the @font-face property:
    1. Instead of using the font's link in the HTML document, enter the link into the URL bar in the browser.
    2. The browser will load the CSS rules. You will need to focus on the rules that are directly labeled as /* latin */. Some of the latin rules are on separate lines. You will need each of these.
    3. Copy each of the CSS rules labeled latin, and paste the rules from the browser to the top of the CSS file.
-It's important to stress the need to copy the @font-face rules to the top of the stylesheet for the font to load correctly in the project.

Font Face II
-We can then use the fonts in the stylesheets as you would use any other font.

Font Face III
-While Google Fonts and other resources can broaden font selection, you may wish to use an entirely different font or abstain from using a font from an external service.
-We can modify our @font-face rule to use local font files as well. We can supply the user with the desired font family and host it along with our site instead of depending on a different site.
-Example:
    @font-face {
      font-family: "Roboto";
      src: url(fonts/Roboto.woff2) format('woff2'),
           url(fonts/Roboto.woff) format('woff'),
           url(fonts/Roboto.tff) format('truetype');
    }
-Here you'll notice:
    1. The main difference is the use of a relative filepath instead of a web URL
    2. We add a format for each file to specify which font to use. Different browsers support different font types, so providing multiple font file options will support more browsers.
-As of now .woff2 appears to be the way of the future, due to greatly reduced file sizes and improved performance, but many browsers still don't support it. There are lots of great sources to find fonts to use locally, such as Font Squirrel (https://www.fontsquirrel.com/).

======================================================================================================

Review

Great job! You learned how to style an important aspect of the user experience, typography.

Let's review what you've learned so far:

    1. Typography is the art of arranging text on a page.

    2. Text can appear in any number of weights, with the font-weight property.

    3. Text can appear in italics with the font-style property.

    4. The vertical spacing between lines of text can be modified with the line-height property.

    5. Serif fonts have extra details on the ends of each letter. Sans-Serif fonts do not.

    6. Fallback fonts are used when a certain font is not installed on a user's computer.

    7. Google Fonts provides free fonts that can be used in an HTML file with the <link> tag or the @font-face property.

    8. Local fonts can be added to a document with the @font-face property and the path to the font's source.

    9. The word-spacing property changes how far apart individual words are.

    10. The letter-spacing property changes how far apart individual letters are.

    11. The text-align property changes where text horizontally on a page.

======================================================================================================

Introduction to Grids
-Using CSS, you can elegantly lay out elements on a web page. There is no simple answer for how best to do this -- depending on what content you are trying to display, multiple different techniques can work well. Codecademy's lessons on the box model, Flexbox, and CSS display and positioning properties explain three possible ways to approach layout.
-A powerful tool for displaying and organizing information on a web page is CSS Grid.
-The grid can be used to lay out entire web pages. Whereas Flexbox is moslty useful for positioning items in a one-dimensional layout, CSS grid is most useful for two-dimensnional layouts, providing many tools for aligning and moving elements across both rows and columns.
-By the end of this lesson, you will understand how to use these properties to create grid layouts:
    1. grid-template-columns
    2. grid-template-rows
    3. grid-template
    4. grid-template-area
    5. grid-gap
    6. grid-row-start / grid-row-end
    7. grid-column-start / grid-column-end
    8. grid-area
-Note: CSS Grid is supported in the most recent versions of many browsers, but it is not supported universally. To make sure that you can get the most out of this course, check your browser version and see if it supports CSS Grid. If CSS Grid is not supported in your browser, you should switch or update to a supported browser and version.

Creating a Grid
-To set up a grid, you need to have both a grid container and grid items. The grid container will be a parent element that contains grid items as children and applies overarching styling and positioning to them.
-To turn an HTML element into a grid container, you must set the element's display property to grid (for a block-level grid) or inline-grid (for an inline grid). Then, you can assign other properties to lay out the grid.

Creating Columns
-By default, grids contain only one column. If you were to start adding items, each item would be put on a new row; that's not much of a grid! To change this, we need to explicitly define the number of rows and columns in our grid.
-We can define the columns of our grid by using the CSS property grid-template-columns.
-Example:
    .grid {
      display: grid;
      width: 500px;
      grid-template-columns: 100px 200px;
    }
-This property creates two changes. First, it defines the number of columns in the grid; in this case, there are two. Second, it sets the width of each column. The first column will be 100 pixels wide and the second column will be 200 pixels wide.
-We can also define the size of our columns as a percentage of the entire grid's width.
-Example:
    .grid {
      display: grid;
      width: 1000px;
      grid-template-columns: 20% 50%;
    }
-In this example, the grid is 1000 pixels wide. Therefore, the first column will be 200 pixels wide because it is set to be 20% of the grid's width. The second column will be 500 pixels wide.
-We can also mix and match these two units.
-Example:
    .grid {
      display: grid;
      width: 100px;
      grid-template-columns: 20px 40% 60px;
    }                       (20px 40px 60px)

-Notice that in this example, the total width of our columns (120 pixels) exceeds the width of the grid (100 pixels).
-This might make our grid cover other elements on the page.

Creating Rows
-We've learning how to define the number of columns in our grid explicitly. To specify the number of size of the rows, we are going to use the property grid-template-rows.
-This property is almost identical to grid-template-columns.
-Example:
    .grid {
      display: grid;
      width: 1000px;
      height: 500px;
      grid-template-columns: 100px 200px;
      grid-template-rows: 10% 20% 600px;
    }
-This grid has two columns and three rows. grid-template-rows defines the number of rows and sets each row's height. In this example the first row is 50 pixels tall (10% of 500), the second row is 100 pixels tall (20% of 500), and the third row is 600 pixels tall.
-When using percentages in these two properties, remember that rows are defined as a percentage of the grid's height, and columns are defined as a percentage of its width.

Grid Template
-The property grid-template can replace the previous two CSS properties.
-Example:
    .grid {
      display: grid;
      width: 1000px;
      height: 500px;
      grid-template: 200px 300px / 20% 20% 70%;
    }
-When using grid-template, the values before the slash will determine the size of each row. The values after the slash determine the size of each column. In this example, we've made two rows and three columns of varying sizes.
-The same rules from before apply; when using percentages to set rows, each row will be a percentage of the grid's total height. Columns are still a percentage of the total width.

Fraction
-You may already be familiar with several types of responsive units such as percentages (%), em's and rem's. CSS Grid introduced a new relative sizing unit - fr, like fraction.
-By using the fr unit, we can define the size of columns and rows as a fraction of the grid's length and width. This unit was specifically created for use in CSS Grid. Using fr akes it easier to prevent grid items from overflowing the boundaries of the grid.
-Example:
    .grid {
      display: grid;
      width: 1000px;
      height: 400px;
      grid-template: 2fr 1fr 1fr / 1fr 3fr 1fr;
    }
-In this example, the grid will have three rows and three columns. The rows are splitting up the available 400 pixels of height into four parts. The first row gets two of those parts, the second row gets one, and the third row gets one. Therefore the first row is 200 pixels tall, and the second and third rows are 100 pixels tall each.
-Each column's width is a fraction of the available space. In this case, the available space is split into five parts. The first column gets one-fifth of the space, the second column gets three-fifths, and the last column gets one-fifth. Since the total width is 1000 pixels, this means that the columns will have widths of 200 pixels, 600 pixels, and 200 pixels respectively.
-It is possible to use fr with other units as well. When this happens, each fr represents a fraction of the available space.
-Example:
    .grid {
      display: grid;
      width: 100px;
      grid-template-columns: 1fr 60px 1fr;
    }
-In this example, 60 pixels are taken up by the second columns. Therefore the first and third columns have 40 available to split between them. Since each gets one fraction of the total, they both end up being 20 pixels wide.

Repeat
-The properties that define the number of rows and columns in a grid can take a function as a value.
-repeat() is one of these functions. The repeat() function was created specifically for CSS Grid.
-Example:
    .grid {
      display: grid;
      width: 300px;
      grid-template-columns: repeat(3, 100px);
    }
-The repeat function will duplicate the specifications for rows or columns a given number of times. In the example above, using the repeat function will make the grid have three columns that are each 100 pixels wide.
-It is the same as writing:
    grid-template-columns: 100px 100px 100px;
-Repeat is particularly useful with fr. For Example, repeat(5, 1fr) would split your table into five equal rows or columns.
-Finally, the second parameter of repeat() can have multiple values:
    grid-template-columns: repeat(2, 20px 50px)
-This code will create four columns where the first and third columns will be 20 pixels wide and the second and fourth will be 50 pixels wide.

minmax
-So far, all of the grids that we have worked with have been a fixed size. The grid in our exmaple has been 400 pixels wide and 500 pixels tall. But sometimes you might want a grid to resize base don the size of your web browser.
-In these situations, you might want to prevent a row or column from getting too big or too small. For example, if you have a 100-pixel wide image in your grid, you probably don't want its column to get thinner than 100 pixels. The minmax() function can help us solve this problem.
-Example:
    .grid {
      display: grid;
      grid-template-columns: 100px minmax(100px, 500px) 100px;
    }
-In this example, the fist and third columns will always be 100 pixels wide, no matter the size of the grid.
-The second column, however, will vary in size as the overall grid resizes.
-The second column will always be between 100 and 500 pixels wide.

Grid Gap
-In all of the grids so far, there hasn't been any space between the items in our grid. The CSS properties grid-row-gap and grid-column-gap will put blank space between every row and columns in the grid.
    .grid {
      display: grid;
      width: 320px;
      grid-template-columns: repeat(3, 1fr);
      grid-column-gap: 10px;
    }
-It is important to note that grid-gap does not add space at the beginning or end of the grid.
-In the example code, our grid will have three columns with two ten-pixel gaps between them.
-Remember that using fr considers all of the available space. The grid is 320 pixels wide and 20 of those pixels are taken up by the two grid gaps. Therefore each column takes a piece of the 300 available pixels. Each column gets 1fr, so the columns are evenly divided into thirds (or 100 pixels each).
-Finally, there is a CSS property grid-gap that can set the row and column gap at the same time, grid-gap: 20px 10px; will set the distance between rows to 20 pixels and the distance between columns to 10 pixels.
-Unlike other CSS grid properties, this shorthand does not take a / between values.
-If only one value is gen, it will set the column gap and the row gap to that value.

Grid Items
-In all of our examples, the items placed in the grid have always taken up exactly one square. This does not always need to be the case; we can drastically change the look of our grid by making grid items take up more than one row and one column.
-You can see this in the diagram:
https://s3.amazonaws.com/codecademy-content/courses/learn-css-grid/lesson-i/css_grid_diagram_2.svg
-Item A, B, C, and E span more than one row.
-By manipulating both the parent and the child elements, we can create beautiful layouts with ease.

Multiple Row Items
-Using the CSS properties grid-row-start and grid-row-end, we can make single grid items take up multiple rows. Remember, we are no longer applying CSS to the outer grid container; we're adding CSS to the elements sitting inside the grid.
-Example:
    .item {
      grid-row-start: 1;
      grid-row-end: 3;
    }
-In this example, the HTML element of class item will take up two rows in the grid, row 1 and 2.
-The values that grid-row-start and grid-row-end accept are grid lines.
-Row grid lines and column grid lines start at 1 and end at a value that is 1 greater than the number of rows or columns the grid has.
-For example, if a grid has 5 rows, the grid row lines range from 1 to 6. If a grid has 8 columns, the grid row lines range from 1 to 9.
-The value for grid-row-start should be the row at which you want the grid item to begin. The value for grid-row-end should be one greater than the row at which you want the grid item to end. An element that covers rows 2, 3, and 4 should have these declarations: grid-row-start: 2 and grid-row-end: 5.
-It is possible for the value of grid-row-start to be greater than that of grid-row-end. Both properties can also each have negative values. Consult the documentation to learn more about how to use these features (https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start).

Grid Row
-We can use the property grid-row as shorthand for grid-row-start and grid-row-end. The following two code blocks will produce the same output:
    .item {
      grid-row-start: 4;
      grid-row-end: 6;
    }
    can be written shorthand as:
    .item {
      grid-row: 4 / 6;
    }
-This code should look similar to the way grid-template is shorthand for grid-template-rows and grid-template-columns. In this case, the starting row goes before the "/" and the ending row goes after it. Again, the ending row is exclusive; this grid item will occupy rows four and five.
-When an item spans multiple rows or columns using these properties, it will also include the grid-gap if any exists. For example, if an item spans two rows of height 100 pixels and there is a ten-pixel grid-gap, then the item will have a total height of 210 pixels.

Grid Column
-The previous three properties also exist for columns. grid-column-start, grid-column-end, and grid-column work identically to the row properties. These properties allow a grid item to span multiple columns.
-When using these properties, we can use the keyword span to start or end a column or row relative to its other end. Look at how span is used in the code below:
    .item {
    grid-column: 4 / span 2;
    }
-This is telling the item element to begin in column four and take up two columns of space. So item would occupy columns four and five. It produces the same result as the following code blocks:
    .item {
      grid-column: 4 / 6;
    }
    .item {
      grid-column-start: span 2;
      grid-column-end: 6;
    }
-span is a useful keyword, because it avoids off-by-one errors (miscalculating the end grid line) you might make when determining the end grid line of an element. If you know where you want your grid item to start and how long it should be, use span.

Grid Area
-We can refactor even more using the property grid-area.
-This property will set the starting and ending positions for both the rows and columns of an item.
-Example:
    .item {
      grid-area: 2 / 3 / 4/ span 5;
    }
-grid-area takes four values separated by slashes. The order is important.
-This is how grid-area will interpret those values:
    1. grid-row-start
    2. grid-column-start
    3. grid-row-end
    4. grid-column-end
-In the above example, the item will occupy rows two and three and columns three through eight.
-Using grid-area is an easy way to place items exactly where you want them in a grid.

======================================================================================================

    Review

    At this point, we've covered a great deal of different ways to manipulate the grid and the items inside it to create interesting layouts.

    1. grid-template-columns defines the number and sizes of the columns of the grid
    2. grid-template-rows defines the number and sizes of the rows of the grid
    3. grid-template is a shorthand for defining both grid-template-columns and grid-template-rows in one line
    4. grid-gap puts blank space between rows and/or columns of the grid
    5. grid-row-start and grid-row-end makes elements span certain rows of the grid
    6. grid-column-start and grid-column-end makes elements span certain columns of the grid
    7. grid-area is a shorthand for grid-row-start, grid-column-start, grid-row-end, and
    8. grid-column-end, all in one line

======================================================================================================

Advanced CSS Grid
-In the previous lesson, you learned all the foundational properties necessary to create a two-dimensional grid-based layout for your web pages. In this lesson, you'll learn the following additional properties that you can use to harness the power of CSS Grid Layout.
    1. grid-template-areas
    2. justify-items
    3. justify-content
    4. justify-self
    5. align-items
    6. align-content
    7. align-self
    8. grid-auto-rows
    9. grid-auto-columns
    10.grid-auto-flow
-Also important to know is explicit and implicit grids and grid axes.

Grid Template Areas
-The grid-template-area property allows you to name sections of your web page to use as values in the grid-row-start, grid-row-end, grid-col-start, grid-col-end, and grid-area properties.
-Example:
    <div class="container">
      <header>Welcome!</header>
      <nav>Links!</nav>
      <section class="info">Info!</section>
      <section class="services">Services!</section>
      <footer>Contact us!</footer>
    </div>
    and in CSS
    .container {
      display: grid;
      max-width: 900px;
      position: relative;
      margin: auto;
      grid-template-areas: "head head"
                           "nav nav"
                           "info services"
                           "footer footer";
      grid-template-rows: 300px 120px 800px 120px;
      grid-template-columns: 1fr 3fr;
    }

    header {
      grid-area: head;
    }

    nav {
      grid-area: nav;
    }

    .info {
      grid-area: info;
    }

    .services {
      grid-area: services;
    }

    footer {
      grid-area: footer;
    }
      1. In the example above, the HTML creates a web page with five distinct parts.
      2. The grid-template-areas declaration in the .container rule set creates a 2-column, 4-row layout.
      3. The grid-template-rows declaration specifies the height of each of the four rows from top to bottom: 300 pixels, 120 pixels, 800 pixels, and 120 pixels.
      4. The grid-template-columns declaration uses the fr value to cause the left column to use one fourth of the available space on the page and the right column to use three-fourths  of th available space on the page.
      5. In each rule set below .container, we use the grid-area property to tell that section to cover the portion of the page specified. The header element spans the first row and both columns. The nav element spans the second row and both columns. The element with class .info spans the third row and left column. The elements with class .services spans the third row and right column. The footer element spans the bottom row and both columns.
      6. An entire page laid out in 40 lines of code.

Overlapping Elements
-Another powerful feature of CSS Grid Layout is the ability to easily overlap elements.
-When overlapping elements, it is generally easiest to use grid line names and the grid-area property.
-Example:
    <div class="container">
      <div class="info">Info!</div>
      <img src="#" />
      <div class="services">Services!</div>
    </div>
    and in CSS
    .container {
      display: grid;
      grid-template: repeat(8, 200px) / repeat(6, 100px);
    }
    .info {
      grid-area: 1 / 1 / 9 / 4;
    }
    .services {
      grid-area: 1 / 4 / 9 / 7;
    }
    img {
      grid-area: 2 / 3 / 5 / 5;
      z-index: 5;
    }
-In the example above, there is a grid container with eight rows and six columnns. There are three grid items within the container -- a <div> with the class info, a <div> with the class services, and an image.
-The info section covers all eight rows and the first three columns. The services section covers all eight rows and the last two columns.
-The image spans the 2nd, 3rd, and 4th rows and the 3rd and 4th columns.
-The z-index property tells the browser to render the image element on top of the services and info sections so that it is visible.

Justify Items
-We have referred to "two-dimensional grid-based layout" several times throughout this course.
-There are two axes in a grid layout -- the column (or block) axis and the row (or inline) axis.
-The column axis stretches from top to bottom across the web page
-The row axis stretches from left to right across the web page
-In the following four exercises, we will learn and use properties that rely on an understanding of grid axis.
-justify-items is a property that positions grid items along the inline, or row, axis.
-This means that it positions items from left to right across the web page.
-justify-items accepts these values:
    1. start - aligns grid items to the left side of the grid area
    2. end - aligns grid items to the right side of the grid area
    3. center - aligns grid items to the center of the grid area
    4. stretch - stretches all items to fill the grid area
-There are several other values that justify-items accepts, which you can read about on the Mozilla Developer Network (https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout#Justifying_Items_on_the_Inline_or_Row_Axis). The definitions for these values can also be found in the documentation (https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items#Values). It is important to note that the page with the definitions include some values that are not accepted in CSS Grid Layout.
-Example:
    <main>
      <div class="card">Card 1</div>
      <div class="card">Card 2</div>
      <div class="card">Card 3</div>
    </main>
    and in CSS
    main {
      display: grid;
      grid-template-columns: repeat(3, 400px);
      justify-items: center;
    }
-In the example above, we use justify-items to adjust the positioning of some elements on this web page.
    1. There is a grid container with three columns that are each 400 pixels wide.
    2. The container has three grid items that do not have a specified width.
    3. Without setting the justify-items property, these elements will span the width of the column they are in (400 pixels).
    4. By setting the justify-items property to center, the .card <div>'s will be centered inside of their columns. They will only be as wide as necessary to contain their content (the words Card 1, etc.).
    5. If we specify a width for the .card elements, they will not stretch the width of their column.
-This property is declared on grid containers.

Justify Content
-In the previous exercise, we learned how to position elements within their columns. In this exercise, we will learn how to position a grid within its parent element.
-We can use justify-content to position the entire grid along the row axis.
-It accepts these values:
    1. start - aligns the grid to the left side of the grid container.
    2. end - aligns the grid to the right side of the grid container.
    3. center - centers the grid horizontally in the grid container.
    4. stretch - stretches the grid items to increase the size of the grid to expand horizontally across the container.
    5. space-around - includes an equal amount of space on each side of a grid element, resulting in double the amount of space between elements as there is before the first and after the last element.
    6. space-between - includes an equal amount of space between grid items and no space at either end.
    7. space-evenly - places an even amount of space between grid items and at either end.
-There are several other values that justify-content accepts, which can read about on the Mozilla Developer Network (https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout#Aligning_the_grid_tracks_on_the_block_or_column_axis). The definitions for these values can also be found in the documentation (https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content#Values). It is important to note that the page with the definitions includes some values that are not accepted in CSS Grid Layout.
-Example:
    <main>
      <div class="left">Left</div>
      <div class="right">Right</div>
    </main>
    and in CSS
    main {
      display: grid;
      width: 1000px;
      grid-template-columns: 300px 300px;
      grid-template-areas: "left right";
      justify content: center;
    }
    1. In the example above, the grid container is 1000 pixels wide, but we only specified two columns that are 300 pixels each. This will leave 400 pixels of unused space in the grid container.
    2. justify-center: center; positions the columns in the center of the grid, leaving 200 pixels on the right and 200 pixels on the left of the grid.
-This property is declared on grid containers.

Aligning Items
-In the previous two exercises, we learned how to position grid items and grid columns from left to right across the page. Below, we'll learn how to position grid items from top to bottom.
-align-items is a property that positions grid items along the block, or column axis. This means that it positions items from top to bottom.
-align-items accepts these values:
    1. start - aligns grid items to the top side of the grid area
    2. end - aligns grid items to the bottom side of the grid area
    3. center - aligns grid items to the center of the grid area
    4. stretch - stretches all items to fill the grid area
-There are several other values that align-items accepts, which can read about on the Mozilla Developer Network (https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout#Aligning_items_on_the_block_or_column_Axis). The definitions for these values can also be found in the documentation (https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items#Values). It is important to note that the page with the definitions includes some values that are not accepted in CSS Grid Layout.
-Example:
    <main>
      <div class="card">Card 1</div>
      <div class="card">Card 2</div>
      <div class="card">Card 3</div>
    </main>
    in CSS
    main {
      display: grid;
      grid-template-rows: repeat(3, 400px);
      align-items: center;
    }
-In the example above, we use align-items to adjust the positioning of some elements on this web page.
    1. There is a grid container with three rows that are 400 pixels tall.
    2. The container has three grid items that do not have a specific width.
    3. Without setting the align-items property, these elements will span the height of the row they are in (400 pixels).
    4. By setting the align-items property to center, the .card <div>'s will be centered vertically inside of their rows. They will only be as tall as necessary to contain their content (the words Card 1, etc.).
    5. If we specify a height for the .card elements, they will not stretch the height of their row even if align-items: stretch; is set.
-This property is declared on grid containers.

Align Content
-In the previous exercise, we positioned grid items within their rows. align-content positions the rows along the column axis, or from top to bottom.
-It accepts:
    1. start - aligns the grid to the top side of the grid container.
    2. end - aligns the grid to the bottom side of the grid container.
    3. center - centers the grid vertically in the grid container.
    4. stretch - stretches the grid items to increase the size of the grid to expand vertically across the container.
    5. space-around - includes an equal amount of space on each side of a grid element, resulting in double the amount of space between elements as there is before the first and after the last element.
    6. space-between - includes an equal amount of space between grid items and no space at either end.
    7. space-evenly - places an even amount of space between grid items and at either end.
-There are several other values that align-items accepts, which you can read about on the Mozilla Developer Network (https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout#Aligning_the_grid_tracks_on_the_block_or_column_axis). The definitions for these values can also be found in the documentation (https://developer.mozilla.org/en-US/docs/Web/CSS/align-content#Values). It is important to note that the page with the definitions includes some values that are not accepted in CSS Grid Layout.
-Example:
    <main>
      <div class="top">Top</div>
      <div class="bottom">Bottom</div>
    </main>
    in CSS
    main {
      display: grid;
      height: 600px;
      rows: 200px 200px;
      grid-template-area: "top"
                          "bottom";
      align-content: center;
    }
    1. In the example above, the grid container is 600 pixels tall, but we only specified two rows that are 200 pixels each. This will leave 200 pixels of unused space in the grid container.
    2. align-content: center; positions the rows in the center of the grid, leaving 100 pixels at the top and 100 pixels at the bottom of the grid.
-This property is declared on grid containers.

Justify Self and Align Self
-The justify-items and align-items properties specify how all grid items contained within a single container will position themselves along the row and column axes, respectively.
-justify-self specifies how an individual element should position itself with respect to the row axis. This property will override justify-items for any item on which it is declared.
-They both accept these four properties:
    1. start - positions grid items on the left side/top of the grid area
    2. end - positions grid items on the right side/bottom of the grid area
    3. center - positions grid items on the center of the grid area
    4. stretch - positions grid items to fill the grid area (default)
-align-self and justify-self accept the same values as align-items and justify-items. You ou can read about on the Mozilla Developer Network (https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout#Aligning_the_grid_tracks_on_the_block_or_column_axis). The definitions for these values can also be found in the documentation (https://developer.mozilla.org/en-US/docs/Web/CSS/align-self#Values). It is important to note that the page with the definitions includes some values that are not accepted in CSS Grid Layout.
-These properties are declared on grid items.

Implicit vs. Explicit Grid
-So far we've been explicitly defining the dimensions and quantities of our grid elements using various properties. This works well in many cases, such as a landing page for a business that will display a specific amount of information at all times.
-There are moments when we wont know how much information we're going to need to display. For example, consider online shopping. Sometimes the page gives you, say, 15 items in a list, but also offers you the option to list all. If the developer has specified a 3-column, 5-row grid (for a total of 15 items), but the search result returns 30...
-For that, there is something called the implicit grid.
-The implicit grid is an algorithm built into the specification for CSS Grid that determines default behavior for the placement of elements when there are more than fit into the grid specified by the CSS.
-The default behavior of the implicit grid is as follows: items fill up rows first, adding new rows as necessary. New grid rows will only be tall enough to contain the content within them.

Grid Auto Rows and Grid Auto Columns
-CSS Grid provides two properties to specify the size of grid tracks added implicitly: grid-auto-rows and grid-auto-columns.

-grid-auto-rows specifies the height of implicitly added grid rows.
-grid-auto-columns specifies the width of implicitly added grid columns.

-grid-auto-rows and grid-auto-columns accept the same values as their explicit counterparts, grid-template-rows and grid-template-columns:
    1. pixels (px)
    2. percentages (%)
    3. fractions (fr)
    4. The repeat() function
-Example:
    <body>
      <div>Part 1</div>
      <div>Part 2</div>
      <div>Part 3</div>
      <div>Part 4</div>
      <div>Part 5</div>
    </body>
    in CSS
    body {
      display: grid;
      grid: repeat(2, 100px) / repeat(2, 150px);
      grid-auto-rows: 50px;
    }
-In the example above, there are 5 <div>'s. However, in the section rule set, we only specify a 2-row, 2-column grid -- four grid cells.
-The fifth <div> will be added to an implicit row that will be 50 pixels tall.
-If we did not specify grid-auto-rows, the rows would be auto-adjusted to the height of the content of the grid items.
-These properties are declared on grid containers.

Grid Auto Flow
-In addition to setting the dimensions of implicitly-added rows and columns, we can specify the order in which they are rendered.

-grid-auto-flow specifies whether new elements should be added to rows or columns

-grid-auto-flow accepts these values:
    1. row - specifies the new elements should fill rows from left to right and create new rows when there are too many elements (default).
    2. column - specifies the new elements should fill columns from top to bottom and create new columns when there are too many elements.
    3. dense - this keyword invokes an algorithm that attempts to fill holes earlier in the grid layout if smaller elements are added.
-You can pair row and column with dense, like this: grid-auto-flow: row dense;
-This property is declared on grid containers.

======================================================================================================

    Review

    Great work! You have learned many new properties to use when creating a layout using CSS Grid! Let's review:

    1. grid-template-areas specifies grid named grid areas
    2. grid layouts are two-dimensional: they have a row, or inline, axis and a column, or block, axis.
    3. justify-items specifies how individual elements should spread across the row axis
    4. justify-content specifies how groups of elements should spread across the row axis
    5. justify-self specifies how a single element should position itself with respect to the row axis
    6. align-items specifies how individual elements should spread across the column axis
    7. align-content specifies how groups of elements should spread across the column axis
    8. align-self specifies how a single element should position itself with respect to the column axis
    9. grid-auto-rows specifies the height of rows added implicitly to the grid
    10.grid-auto-columns specifies the width of columns added implicitly to the grid
    11.grid-auto-flow specifies in which direction implicit elements should be created

======================================================================================================
