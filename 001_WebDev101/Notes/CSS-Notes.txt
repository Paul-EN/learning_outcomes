#Notes for CSS portion of - The Odin Project | Web Developer 101 | HTML and CSS Basics - by Codecademy

CSS
-Stands for Cascading Style Sheets, is a language that web developers use to style the HTML content on a web page. If you're interested in modifying colors, font types, font sizes, shadows, images, element positioning, and more, CSS is the tool for the job.
-Although CSS is a different language than HTML, it's possible to write CSS code directly within HTML code using inline styles.

style
-Using the style attribute, you can give HTML elements CSS qualities.
-Example:
    <p style="color: red;">I'm learning to code!</p>
    to add more than one style to a single element, simple add it after the ;
    <p style="color: red; font-size: 20px;">I'm learning to code!</p>

<style> tag
-Although you could get away with simply using the style attribute directly with the html elements, it would quickly become unmanageable, as you would have to add it to every element individually.
-For this, we have the <style></style> tags, which allow to set up the styles for many elements at a time.
-Example:
    <head>
      <style>
        p {
          color: red;
          font-size: 20px;
          }
      </style>
    </head>
    This example would change the color and font size of all paragraph text.

Keeping HTML and CSS separate
-It is recommended that the CSS code be kept separate from the HTML in order to preserve the readability and maintainability of each file.
-In order to do this, we create a separate file with the .css file extension.
-Ex: style.css
-So that the html file can recognize the css file, we need to link them together. For this we need to set up a <link> element that uses specific attributes: href, type (with text/css value), and rel (with stylesheet value).
-Example:
    <link href="./style.css" type="text/css" rel="stylesheet">

Tag Name
-In CSS you can select HTML elements using their element's tag name. The tag name is the word (or character) between the HTML angle brackets.
-Ex:
    The tag name for the paragraph element <p> is simply p
-Ex:
    p {

    }
    In this example, all paragraph elements will be selected using a CSS selector. The selector in this case is p. Note the CSS selector matches the HTML tag for that element, but without the angle brackets. After the selector, we must add the curly braces, which is where the CSS properties will go.

Class Name
-CSS is also able to select elements according to class name.
-Ex:
    <p class="brand">Sole Shoe Company</p>
    To select for this class we simply type it in the CSS file as:
    .brand {

    }
    Note the . at the beginning of the class. This indicates that the selector is for class.

Multiple Classes
-It is possible to assign multiple classes to a single HTML element.
-For example, suppose we create two CSS styles:
    .green {
      color: green;
    }

    .bold {
      font-weight: bold;
    }
    To assign both these CSS styles to an HTML element, we would write it as such:
    <h1 class="green bold"> ... </h1

ID Name
-If an HTML element needs to be styled uniquely (no matter what classes are applied to the element), we can add an ID to the element. To add an ID to an element, the element needs an id attribute.
-Ex:
    <h1 id="large-title"> ... </h1>
-Then, CSS can select HTML elements by their id attribute. To select an id element, CSS prepends the id name with a hashtag (#).
-Ex:
    When styling for a specific id, we write
    #large-title {

    }

Classes and IDs
-CSS can select HTML element by their tag, class, and ID. CSS classes and IDs have different purposes, which can affect which one you use to style HTML elements.
-CSS classes are meant to be reused over many elements and can be mixed.
-CSS IDs are meant to style only one element. IDs also override the styles of tags and classes.
-Since IDs override class and tag styles, they should be used sparingly and only on elements that need to always appear the same.

Specificity
-Specificity is the order by which the browser decides which CSS styles will be displayed.
-As best practice in CSS is to style elements while using the lowest degree of specificity, so that if an element needs a new style, it is easy to override.
-IDs are the most specific selector in CSS, followed by classes, and finally, tags.
-Suppose we had a tag styling that set the color of the text to whatever color. If we then added a class styling (that was used in a tag that was already styled), that class styling would override the tag styling. If we then added an ID styling, that ID styling would override both the class and tag styling.
-The only way to override an ID is to add another ID with additional styling.
-Attempt to style first with a tag selector, if not possible, then the class, and if that isn't possible, then the ID selector.

Chaining Selectors
-When writing CSS rules, it's possible to require an HTML element to have two or more CSS selectors at the same time.
-This is done by combining multiple selectors, which we will refer to as chaining. For instance, if there was a .special class for h1 elements, the CSS would look like:
    h1.special {

    }
    The code above would select only the h1 elements that have a class of special. If a p element also had a class of special, the rule in the example would not style the paragraph.

Nested Elements
-In addition to chaining selectors to select elements, CSS also supports selecting elements that are nested within other HTMl elements. For instance, consider the following HTML:
    <ul class="main-list">
      <li> ... </li>
      <li> ... </li>
      <li> ... </li>
    </ul>
    The nested <li> elements are selected with the following CSS:
    .main-list li {

    }
    In the example above, the .main-list selects the .main-list element (the unordered list element). The nested <li> are selected by adding li to the selector, separated by a space, resulting in .main-list li as the final selector (note the space in the selector).
-Selecting elements in this way can make our selectors even more specific by making sure they appear in the context we expect.
-CSS selectors that target nested elements will override other more generic selectors.

Important
-There is one thing that is even more specific than IDs: !important.
-!important can be applied to specific attributes insted of full rules. It will override any style no matter how specific it is. As a result, it should almost never be used. Once !important is used, it is very hard to override.
-Ex:
    p {
      color: blue !important;
    }

    .main p {
      color: red;
    }
    In this example, despite there already being a selector targeting a nested element, because of the !important marker, the color styling of p will take precedence over any other styling.

Multiple Selectors
-In order to make CSS more concise, it's possible to add CSS styles to multiple CSS selectors all at once. This prevents writing repetitive code.
-Ex:
    h1 {
      font-family: Georgia;
    }

    .menu {
      font-family: Georgia;
    }
    Instead of writing font-family: Georgia twice for two selectors, we can separate the selctors by a comma to apply the same style to both, like this:
    h1,
    .menu {
      font-family: Georgia;
    }

========================================================================================================

    Review CSS Selectors

    Throughout this lesson, you learned how to select HTML elements with CSS and apply styles to them. Let's review what you learned:

        1. CSS can change the look of HTML elements. In order to do this, CSS must select HTML elements, then apply styles to them.
        2. CSS can select HTML elements by tag, class, or ID.
        3. Multiple CSS classes can be applied to one HTML element.
        4. Classes can be reusable, while IDs can only be used once.
        5. IDs are more specific than classes, and classes are more specific than tags. That means IDs will override any styles from a class, and classes will override any styles from a tag selector.
        6. Multiple selectors can be chained together to select an element. This raises the specificity, but can be necessary.
        7. Nested elements can be selected by separating selectors with a space.
        8. The !important flag will override any style, however it should almost never be used, as it is extremely difficult to override.
        9. Multiple unrelated selectors can receive the same styles by separating the selector names with commas.

========================================================================================================

CSS Structure
-To style an HTML element using CSS, you need to write a CSS declaration inside the body of a CSS selector.
    h1 {
      color: blue;
    }
    The example above selects the <h1> element. Inside of the selector's body, we typed color: blue. This line is referred to as a CSS declaration. CSS declarations consist of a property and a value.

Property and Value
-Property: The property you'd like to style of that element (i.e., size, color, etc.).
-Value: The value of the property (i.e., 18px for size, blue for color, etc.).
    In the previous example, the property is color, and the value is blue.

font-family
-'font-family' is the property that specifies that you want to set the... font. Then followed by a colon, space, and then the name of the font (within "" if more than two words) and a semi-colon.
-Website for various CSS fonts: http://www.cssfontstack.com/
-Example:
    h1 {
      font-family: Helvetica;
    }

font-size
-'font-size', similar to font-family, except it changes the size of the typeface.
-Example:
    p {
      font-size: 18px;
    }

font-weight
-'font-weight' property controls how bold or thin text appears. 'normal' can also be used for a value.
-Example:
    p {
      font-weight: bold;
    }

text-align
-By default, text always appears on the left side of the browser. To align text differently, we can use the property 'text-align'.
-'text-align' has three different values: left, center, right.
-Example:
    p {
      text-align: right;
    }
    Sets all the font of selector to the right side of the web page.

Color
-It's important to make two distinctions about color. Color can affect the following deign aspects:
    Foreground color
    Background color
-Foreground color is the color that an element appears in. For example, when a heading is styled to appear green, the foreground color of the heading has been styled.
-Conversely, when a heading is styled so that its background appears yellow, the background color of the heading has been styled.
-In CSS, these two design aspects can be styled with the following two properties:
    color - this property styles an element's foreground color
    background-color - this property styles an element's background color
-Example:
    h1 {
      color: red
      background-color: blue;
    }

Opacity
-Opacity is the measure of how transparent an element is. It's measured from 0 to 1, with 1 representing 100%, or fully visible and opaque, and 0 representing 0%, or fully invisible.
-Opacity can be used to make elements fade into others for a nice overlay effect. To adjust the opacity of an element, the syntax looks like this:
    .overlay {
      opacity: 0.5;
    }

Background Image
-CSS has the ability to change the background of an element. One option is to make the background of an element an image. This is done through the CSS property background-image. Its syntax looks like this:
    .main-banner {
      background-image: url("https://www.example.com/image.jpg");
    }
    The url can be a file within your project, or it can be a link to an external site.

========================================================================================================

    Review Visual Rules

    Incredible work! You used CSS to alter text and images throughout a website. Throughout this lesson, you learned concepts including:

    1. CSS declarations are structured into property and value pairs.
    2. The font-family property defines the typeface of an element.
    3. font-size controls the size of text displayed.
    4. font-weight defines how thin or thick text is displayed.
    5. The text-align property places text in the left, right, or center of its parent container.
    6. Text can have two different color attributes: color and background-color. color defines the color of the text, while background-color defines the color behind the text.
    7. CSS can make an element transparent with the opacity property.
    8. CSS can also set the background of an element to an image with the background-image property.

========================================================================================================

Intro Box Model
-Browsers load HTML elements with default position values. This often leads to an unexpected and unwanted user experience, while limiting the views you can create.
-If you have used HTML and CSS, you have unknowingly seen aspects of the box model. For example, if you have set the background color of an element, you may have noticed that the color was appied not only to the area directly behind the element, but also to the area to the right of the element. Also, if you have aligned text, you know it is aligned relative to something. What is that something?
-All elements on a web page are interpreted by the browser as "living" inside of a box. This is what is meant by the box model.
-For example, when you change the background color of an element, you change the background color of its entire box.
-Example:
    ================================================
    |                     margin                   |
    |   ========================================   |
    |   |                 border               |   |
    |   |   ================================   |   |
    |   |   |            padding           |   |   |
    |   |   |   =========================  |   |   |
    |   |   |   |        content*       |  |   |   |*[height]
    |   |   |   =========================  |   |   |
    |   |   ================================   |   |
    |   ========================================   |
    ================================================
                        *[width]

-Width and height: Specifies the width and height of the content area
-Padding: Specifies the amount of space between the content area and the border
-Border: Specifies the thickness and style of the border surrounding the content area and padding
-Margin: Specifies the amount of space between the border and the outside edge of the element

Borders
-A border is a line that surrounds an element, like a frame around a painting.
-Borders can be set with a specific width, style, and color.
    1. width: The thickness of the border. A border's thickness can be set in pixels or with one of the following keywords: thin, medium, or thick.
    2. style: The design of the border. Web browsers can render any of 10 different styles. Some of these styles include: none, dotted, and solid.
    3. color: The color of the border. Web browsers can render colors using a few different formats, including 140 built-in color keywords.
-Excample:
    p{
      border: 3px solid coral;
    }
-In the example above, the border has a width of 3 pixels, a style of solid and a color of coral. All three properties are set in one line of code.
-The default border is medium none color, where color is the current color of the element. If width, style, or color are not set in the CSS file, the web browser assigns the default value for that priority.
-Example:
    p.content-header {
      height: 80px;
      width: 240px;
      border: solid coral;
    }
-In this example, the border style is set to solid and the color is set to coral. The width is not set, so it defaults to medium.

Border Radius
-Ever since we revealed the borders of boxes, you may have noticed that the borders highlight the true shape of an element's box: square. Thanks to CSS, a border doesn't have to be square.
-You can modify the corners of an element's border box with the border-radius property
-Example:
    div.container {
      border: 3px solid rgb(22, 77, 100);
      border-radius: 5px;
    }
-The code in the example above will set all four corners of the border to a radius of 5 pixels (i.e. the same curvature that a circle with radius 5 pixels would have).
-You can create a border that is a perfect circle by setting the radius equal to the height of the box, or to 100%.
-Example:
    div.container {
      height: 60px;
      width: 60px;
      border: 3px solid rgb(22, 77, 100);
      border-radius: 100%;
    }
-The code in the example above creates a div that is a perfect circle.

Padding I
-The space between the contents of a box and the borders of a box is known as padding.
-Padding is like the space between a picture and the frame surrounding it. In CSS, you can modify this space with the padding property.
-Example:
    p.content-header {
      border: 3px solid coral;
      padding: 10px;
    }
-The example above puts 10 pixels of space between the content of the paragraph (the text) and the borders, on all four sides.
-The padding property is often used to expand the background color and make content look less cramped.
-Each side can be padded individually through the following properties:
    1. padding-top
    2. padding-right
    3. padding-bottom
    4. padding-left

Padding II
-Another implementation of the padding property lets you specify exactly how much padding there should be on each side of the content in a single declaration.
-Example:
    p.content-header {
      border: 3px solid grey;
      padding: 6px 11px 4px 9px;
    }
-The four values 6px 11px 4px 9px correspond to the amount of padding in a clockwise rotation. In order, it specifies the amount of padding on the top (6 pixels), right (11 pixels), bottom (4 pixels), and left (9 pixels) side of the content.
-When using this implementation of padding property, we must specify a padding value for all four sides of the element.
  -However, if the top and bottom values for padding will equal each other, and the left and right values for padding will also equal each other, you can use the following shortcut:
    p.content-header {
      padding: 5px 10px;
    }
    The firt value, 5px, sets the padding value for the top and bottom sides of the content. The second value, 10px, sets the padding value for the left and right sides of the content.

Margins I
-The fourth and final component of the box model is margin.
-Margin refers to the space directly outside of the box. The margin property is used to specify the size of this space.
-Example:
    p {
     border: 1px solid aquamarine;
     margin: 20px;
    }
-The code above will place 20px of space on the outside of the paragraph's box on all four sides. This means that other HTML elements on the page cannot come within 20 pixels of the paragraph's border
-Similar in practice to the padding property.
-The margin of each side can be set individually with:
    1. margin-top
    2. margin-right
    3. margin-bottom
    4. margin-left

-margin values follow the similar implementation methods as padding.
-Example:
             top right bottom left (clockwise)
    p {
     margin: 6px 10px 5px 12px;
    }
    and if top and bottom are equal and left and right are equal...
    p {
     margin: 6px 12px
    }

Auto
-The margin property also lets you center content. However, you must follow a few syntax requirements. -Example:
    div {
      margin: 0 auto;
    }
-The above example will center the divs in their containment elements. The 0 sets the top and bottom margins to 0 pixels. The auto value instructs the browser to adjust the left and right margins until the element is centered within its containment element.
-The div elements in the example above should center within an element that fills the page, but this doesn't occur. Why?
  -In order to center an element, a width must be set for that element. Otherwise, the width of the div will be automatically set to the full width of its containing element, like the <body>, for example. It's not possible to center an element that takes up the full width of the page.
  -Ex:
    div.headline {
      width: 400px;
      margin: 0 auto;
    }

Margin Collapse
-As you have seen, padding is space added inside an element's border, while margin is space added outside an element's border. One additional difference is that top and bottom margins, also called vertical margins, collapse, while top and bottom padding does not.
-Horizontal margins (left and right), like padding, are always displayed and added together. For example, if two divs with ids #div-one and #div-two, are next to each other, they will be as far apart as the sum of their adjacent margins.
-Example:
    #img-one {
      margin-right: 20px;
    }
    #img-two {
      margin-left: 20px;
    }
    In this example, the space between the #img-one and #img-two borders is 40 pixels. The right margin of #img-one (20px) and the left margin of #img-two (20px) add to make a total margin of 40 pixels.
-Unlike horizontal margins, vertical margins do not add. Instead, the larger of the two vertical margins sets the distance between adjacent elements.
-Example:
    #img-one {
      margin-bottom: 30px;
    }
    #img-two {
      margin-top: 20px;
    }
    In this example, the vertical margin between the #img-one and #img-two elements is 30 pixels. Although the sum of the margins is 50 pixels, the margin collapses so the spacing is only dependent on the #img-one bottom margin.
-It may be helpful to think of collapsing vertical margins as a short person trying to push a taller person. The tall person has longer arms and can easily push the short person, while the person with short arms cannot reach the person with long arms.

Minimum and Maximum Height and Width
-Because a web page can be viewed through displays of differing screen size, the content on the web page can suffer from those changes in size. To avoid this problem, CSS offers two properties that can limit how narrow or how wide an element's box can be sized to.
    1. min-width: this property ensures a minimum width of an element's box
    2. max-width: the property ensures a maximum width of an element's box
-Example:
    p{
      min-width: 300px;
      max-width: 600px;
    }
    In the example above, the width of all paragraphs will not shrink below 300 pixels, nor will the width exceed 600 pixels.
-Content, like text, can become difficult to read when a browser window is narrowed or expanded. These two properties ensure that content is legible by limiting the minimum and maximum widths of an element.
-Similarly, you can also limit the minimum and maximum height of an element with:
    1. min-height: this property ensures a minimum height for an element's box
    2. max-height: this property ensures a maximum height of an element's box
-Example:
    p {
      min-height: 150px;
      max-height: 300px;
    }
    In the example above, the height of all paragraphs will not shrink below 150 pixels and the height will not exceed 300 pixels.
-If the contents of an element's box, max-height, property is set too low, it's possible for the content to spill outside of the box, resulting in content that is not legible.

Overflow
-Taking into account all the dimensions set for elements add up to a corresponding size.
-There will be times when these components result in an element that is larger than the parent's containing area.
-In order to ensure that we can view all of an element that is larger than its parent's containing area we use the overflow property.
-The overflow property controls what happens to content that spills, or overflows, outside its box. It can be set to one of the following values:
    1. hidden - when set to this value, any content that overflows will be hidden from view
    2. scroll - when set to this value, a scrollbar will be added to the element's box so that the rest of the content can be viewed by scrolling
    3. when set to this value the overflow content will be displayed outside of the containing element. Note, this is the default value.
-Example:
    p {
      overflow: scroll;
    }
    If any of the paragraph content overflows (perhaps a user resizes their browser window), a scrollbar will appear so that users can view the rest of the content.
-The overflow property is set on a parent element to instruct a web browser how to render child elements. For example, if a div's overflow property is set to scroll, all children of this div will display overflowing content with a scroll bar.

Resetting Defauts
-All major web browsers have a default stylesheet they use in the absence of an external stylesheet.
-These default stylesheets are known as user agent stylesheets. In this case, the term "user agent" is a technical term for the browser.
-User agent stylesheets often have default CSS rules that set default values for padding and margin. This affects how the browser displays HTML elements, which can make it difficult for a developer to design or style a web page.
-Many developers choose to reset these default values so they can truly work with a clean slate.
-Example:
    * {
      margin: 0;
      padding: 0;
    }
    The code above resets the default margin and padding values of all HTML elements. It is often the first CSS rule in an external stylesheet.
-Note that both properties are both set to 0. When these properties are set to 0, they do not require a unit of measurement.

Visibility
-Elements can be hidden from view with the visibility property
-The visibility property can be set to one of the following values:
    1. hidden: hides an element
    2. visible: displays an element
-Example:
    In HTML
    <ul>
      <li>Explore</li>
      <li>Connect</li>
      <li class="future">Donate</li>
    </ul>
    and in CSS
    .future {
      visibility: hidden;
    }
    In the example above, the list item with a class of future will be hidden from view in the browser.
-Keep in mind, however, that users can still view the contents of the list item (e.g. Donate) by viewing the source code in their browser. Furthermore, the web page will only hide the contents of the element. It will still leave an empty space where the element is intended to display.
-Note: What's the difference between display: none and visibility: hidden? An element with display: none will be completetly removed from the web page. An element with visibility: hidden, however, will not be visible on the web page, but the space reserved for it will.

========================================================================================================

Review

In this lesson, we covered the four properties of the box model: height and width, padding, borders, and margins. Understanding the box model is an important step towards learning more advanced HTML and CSS topics. Let's take a minute to review what you learned.

    1. The box model comprises a set of properties used to create space around and between HTML elements.
    2. The height and width of a content area can be set in pixels or percentage.
    3. Borders surround the content area and padding of an element. The color, style, and thickness of a border can be set with CSS properties.
    4. Padding is the space between the content area and the border. It can be set in pixels or percent.
    5. Margin is the amount of spacing outside of an element's border.
    6. Horizontal margins add, so the total space between the borders of adjacent elements is equal to the sum of the right margin of one element and the left margin of the adjacent element.
    7. Vertical margins collapse, so the space between vertically adjacent elements is equal to the larger margin.
    margin: 0 auto horizontally centers an element inside of its parent content area, if it has a width.
    8. The overflow property can be set to display, hide, or scroll, and dictates how HTML will render content that overflows its parent's content area.
    9. The visibility property can hide or show elements.

========================================================================================================
