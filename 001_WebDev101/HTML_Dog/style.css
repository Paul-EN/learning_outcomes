/*
- Inline -
Inline styles are ploonked straight into the HTML tags using the style attribute.
Example:
    <p style="color: red">text</p>
This will make that specific paragraph red.

But, if you remember, the best-practice is that the HTML should be a stand-alone, presentation free document, and so in-line styles should be avoided wherever possible.

- Internal -
Embedded, or internal, styles are used for the whole page. Inside the head elemenet, the style tags surround all of the styles for the page.
Example:
    <!DOCTYPE html>
    <html>
      <head>
        <title>CSS Example</title>
        <style>
            p {
              color: red;
            }
            a {
              color: blue;
            }
          </style>

          ...

        </head>
      </html>

This will make all of the pargraphs in the page red and all of the links blue.
Although preferable to soiling our HTML with inline presentation, it is similarly usually preferable to keep the HTML and the CSS files separate, and so we are left with our savior...

- External -
External styles are used for the while, multiple-page website. There is a separate CSS file, which will simply look somthign like:
Example:
    p {
      color: red;
    }
    a {
      color: blue;
    }
If this file is saved as "style.css" in the same directory as your HTML page then it can be linked to in the HTML like this:
Example:
    <!DOCTYPE html>
    <html>
      <head>
        <title>CSS Example</title>
        <link rel="stylesheet" href="style.css">
    ...

Whereas HTML has tags, CSS has selectors. Selectors are the names given to styles in internal and external style sheets.
HTML selectors are simply the names of HTML tags and are used to change the style of a specific type of element.
  For each selector there are "properties" inside curly brackets, which simply take the form of words such as color, font-weight, or background-color.
  A value is given to the property following a colon (NOT an equals sign). Semi-colons are used to separate the properties.
  Example:

  body {
    font-size: 14px;
    color: navy;
  }

  This will apply the given values to the font-size and color properties to the body selector.
  So basically, when this is applies to an HTML document, text between the body tags (which is the content of the whole window) will be 14 pixels in size and navy in color.

  - Lengths and Percentages -
  There are many property-specific units for values used in CSS, but there are some general units that are used by a number of properties and it is worth familiarizing yourself with these before continuing.
      1. px (such as font-size: 12px) is the unit for pixels
      2. em (such as font-size: 2em) is the unit for the calculated size of a font. So "2em", for example, is two times the current font size.
      3. pt (such as font-size: 12pt) is the unit for points, for measurements typically in printed media.
      4. % (such as width: 80%) is the unti for... wait for it... percentages.

  Other units include pc (picas), cm (centimeters), mm(millimeters) and in (inches).
  When a vlaue is zero, you do not need to state a unit. For example, if you wanted to specify no border, it would be border: 0.

    "px" in this case, doesn't actually necessarily mean pixels - the little squares that make up a computer's display - all of the time. Modern browsers allow users to zoom in and out of a page so that, even if you specify font-size: 12px, or height: 200px, for example, although these will be the genuine specified size on a non-zoomed browser, they will still increase and decrease in size with the user's preference.
*/

/*
  The following values, to specify full-on as red-as-red-can-be, all produce the same result:
    red
    rgb(255,0,0)
    rgb(100%,0%,0%)
    #ff0000
    #f00
  Predefined color names include aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow.
  transparent is also a valid value.
    With the possible exception of black and white, color names have limited use in a modern, well-designed web sites because they are so specific and limiting.

  The three values in the RGB value are from 0 to 255, 0 being the lowest level (no red, for example), 255 being the highest level (full red).
  These values can also be precentages.

  Hexadecimal is a base-16 number system. We are generally used to the decimal number system (base-10 from 0 to 9), but hexadecimal has 16 digits, from 0 to f.
  The hex number is prefixed with a hash character (#) and can be three or six digits in length. Basically, the three-digit version is a compressed version of the six-digit (#ff0000 becomes #f00, #cc9966 becomes #c96, etc). The three-digit version is easier to decipher (the first digit, like the first value in RGB, is red, the second green and the third blue) but the six-digit version vies you more control over the exact color.
    CSS3, the latest version of CSS, also allows you to define HSL colors - hue, saturation, and lightness.
    Follow this link for more info on colors: http://www.htmldog.com/guides/css/advanced/colors/
*/

/*
  - color and background-color -
  Colors cna be applied by using color and background-color (note that this must be the American English "color" and not "colour").
  A blue background and yellow text could look like this:
  Example:
    h1 {
      color: yellow;
      background-color: blue;
    }
  These colors might be a little too harsh, so you could change the code of your CSS file for slightly different shades:
*/

  body {
    font-size: 14px;
    color: navy;
  }
  h1 {
    color: #ffc;
    background-color: #009;
  }

/*
  - font-family -
  This is the font itself, such as Times New Roman, Arial, or Verdana.
  The user's browser has to be able to find the font you specify, which, in most cases, means it needs to be on their computer so there is little point in using obscure fonts that are only sitting on your computer.
  There are a select few "safe" fonts (the most commonly used are Arial, Verdana, and Times New Roman), but you can specify more than one font, seperated by commas.
  The purpose of this is that if the user does not have the first font you specify, the browser will go through the list until it finds one it does have.
  This is useful because different computers sometimes have different fonts installed.
  So: font-family: arial, helvetica, serif, will look for the Arial font first and, if the browser can't find it, it will search for Helvetica, and then a common serfi font.
    Note: if the name of a font is more than one word, it should be put in quotation marks, such as font-family: "Times New Roman".
*/

/*
  - font-weight -
  font-weight states whether the text is bold or not. Most commonly this is used as font-weight: bold or font-weight: normal but other values are bolder, lighter, 100, 200, 300, 400 (same as noraml), 500, 600, 700 (same as bold), 800, or 900.
*/

  .normal {
    font-weight: normal;
  }
  .weight-200 {
    font-weight: 200;
  }
  .bold {
    font-weight: bold;
  }

/*
  - font-style -
  font-style states whether the text is italic or not. It can be font-style: italic or font-style: normal
*/

  .italic {
    font-style: italic;
  }
  .style-normal {
    font-style: normal;
  }

/*
  - text-decoration -
  text-decoration states whether the text has got a line running under, over, or through it.
    text-decoration: underline does what you would expect
    text-decoration: overline places a line above the text
    text-decoration: line-through puts a line through the text ("strike-through")
  This property is usually used to decorate links and you can specify no underline with
    text-decoration: none

      Underlines should only really be used for links. They are a commonly understood web convention that has lead users to generally expect underlined text to be a link.
*/

  .underline {
    text-decoration: underline;
  }
  .overline {
    text-decoration: overline;
  }
  .line-through {
    text-decoration: line-through;
  }

/*
  - text-transform  -
  text-transform will change the case of the text.
    text-transform: capitalize turn the first letter of every word into uppercase
    text-transform: uppercase turns everything into uppercase
    text-transform: lowercase turns everything into lowercase
    text-transform: none self-explanitor
  So, a few of these things used together might look like this:
  body {
    font-family: arial, helvetica, sans-serif;
    font-size: 14px;
  }

  h1 {
    font-size: 2em;
  }

  h2 {
    font-size: 1.5em;
  }

  a {
    text-decoration: none;
  }

  strong {
    font-style: italic;
    text-transform: uppercase;
  }
*/

  .capitalize {
    text-transform: capitalize;
  }
  .uppercase {
    text-transform: uppercase;
  }
  .lowercase {
    text-transform: lowercase;
  }

/*
  - Text spacing -
  Before we move on from this introduction to styling text, a quick look at how to space out the text on a page.
  The letter-spacing and word-spacing properties are for spacing between letters or words. The value can be a length or normal.
  The line-height property sets the height of the lines in an element, such as a paragraph, without adjusting the size of the font.
    It can be a number (which specifies a multiple of the font size, so "2" will be two times the font size, for example), a length, a percentage, or normal.
  The text-align property will align the text inside an element to left, right, center, or justify.
  The text-indent property will indent the first line of a paragraph, for example, to a given length or percentage. This is a style traditionally used in print, but rarely in difital media such as the web.
  Example:
    p {
      letter-spacing: 0.5em;
      word-spacing: 2em;
      line-height: 1.5;
      text-align: center;
    }
*/
  .letter-spacing {
    letter-spacing: 0.5em;
  }
  .word-spacing {
    word-spacing: 2em;
  }
  .line-height {
    line-height: 3.0;
  }
  .text-align {
    text-align: center;
  }

/*
  - Margins and Padding -
  margin and padding are the two most commonly used properties for spacing-out elements.
  A margin is the space outside something.
  Padding is the space inside something.

  Change the CSS code for h2 to the following:
*/

  h2 {
    font-size: 1.5em;
    background-color: #ccc;
    margin: 20px;
    padding: 40px;
  }

/*
  This leaves a 20-pixel width space around the secondary header and the header itself is fat from the 40-pixel width padding.
  The four sides of an element can also be set individually, margin-top, margin-right, margin-bottom, margin-left, padding-top, padding-right, padding-bottom, and padding-left are the self-explanatory properties you can use.
*/

/*
  - Borders -
  Borders can be applied to most HTML elements within the body.
  To make a border around an element, all you need is border-style.
  The values can be solid, dotted, dashed, double, groove, ridge, inset, and outset.
  border-width sets the width of the border, most commonly using pixels as a value.
  There are also properties for border-top-width, border-right-width, border-bottom-width, and border-left-width.

  Finally, border-color sets the color.

  Add the following code to the CSS file:
*/

  h2 {
    border-style: dashed;
    border-width: 3px;
    border-left-width: 10px;
    border-right-width: 10px;
    border-color: red;
  }

/*
  This will make a red dashed border around all HTML secondary headers (the h2 element) that is 3 pixels wide on the top and bottom and 10 pixels wide on the left and right (these having over-ridden the 3 pixel wide width of the entire border).
*/

/*
- CSS Beginner Tutorial Review -


body {
    font-family: arial, helvetica, sans-serif;
    font-size: 14px;
    color: black;
    background-color: #ffc;
    margin: 20px;
    padding: 0;
}

p {
    line-height: 21px;
}

h1 {
    color: #ffc;
    background-color: #900;
    font-size: 2em;
    margin: 0;
    margin-bottom: 7px;
    padding: 4px;
    font-style: italic;
    text-align: center;
    letter-spacing: 0.5em;
    border-bottom-style: solid;
    border-bottom-width: 0.5em;
    border-bottom-color: #c00;
}

h2 {
    color: white;
    background-color: #090;
    font-size: 1.5em;
    margin: 0;
    padding: 2px;
    padding-left: 14px;
}

h3 {
    color: #999;
    font-size: 1.25em;
}

img {
    border-style: dashed;
    border-width: 2px;
    border-color: #ccc;
}

a {
    text-decoration: none;
}

strong {
    font-style: italic;
    text-transform: uppercase;
}

li {
    color: #900;
    font-style: italic;
}

table {
    background-color: #ccc;
}

*/
