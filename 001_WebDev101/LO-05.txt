/* Web Development 101 - DOM Manipulation */

Introduction:
  One of the most unique and useful abilities of JavaScript is its ability to manipulate the DOM. But what is the DOM, and how do we go about changing it?

Learning Outcomes:
  What is DOM in relation to a webpage?
    -The Document Object Model is a tree-like representation of the contents on a webpage or document.
  What's the difference between a "node" and an "element"?
    -A "node" is any object in the DOM hierarchy while an "element" is one specific node.
  How do you target nodes with "selectors"?
    -There are several ways, with CSS style-selectors, to target a node.
    -<div class="display"></div> can be selected as follows:
      div
      div.display
      .display
    -There are also relatiuonal selectors such as firstChild or lastSibling.
    -Combined with "Query Selectors", this is how you can target a node using JavaScript:
      i.e. document.querySelector(".display"); would select the div above.
  What are the basic methods for finding/adding/removing and altering DOM nodes?
    -As mentioned above, you can find nodes in the DOM using query selectors.
    -To creat an element, use document.createElement(tagName[, option])
      i.e. const div = document.createElement('div'); will create a div element. However, this div has not been add to the webpage yet.
    -To append this element, use parentNode.appendChild(childNode)
      i.e. parentNode.appendChild(div);
    -To remove this element, parentNode.removeChild(child)
    -This will remove child from parentNode on the DOM and return reference to child.
      i.e. parentNode.removeChild(div);
    -Once you have a reference to an element, as above, you can alter it in many ways.
      div.style.color = 'blue'; adds the indicated style rule
      div.setAttribute('id', 'theDiv'); sets the id attribute of our div to theDiv.
    -What is the diffrence between a "nodelist" and an "array of nodes"?
      A "nodelist" looks like an array, but it is missing several methods that come with an Array.
      A solution to this problem is to use the spread operator or Arra.from() to convert a nodelist into an aray.
    -How do "events" and "listeners" work? What are three ways to use events in your code?
      "Events" are how you make your web page dynamic. They are triggered by "listeners", and can fire when the page lodas, when you click you mouse, when you push your keyboard, and many, many more.
      The three primary ways to use events are:
        By attaching scripts to event attributes on elements in the HTML document.
          i.e. <button onclick="alert(this.tagName)">Click Me</button>
        By setting the "on_evet_" property on the DOM object in your JavaScript.
          // the html file
          <button id="btn">Click Me</button>
          // the JavaScript file
          var btn = document.querySelector('#btn');
          btn.onclick = (e) => alert(e.target.tagName);
        By attaching event listeners to the nodes in your JavaScript
          // the html file
          <button id="btn">Click Me</button>
          // the JavaScript file
          var btn = document.querySelector('#btn');
          btn.addEventListener('click', (e) => {
            alert(e.target.tagName);
          });
      -How does "bubbling" work?
        Bubbling is a form of "event propagation."
        It is an efficient method for firing an event on multiple elements -- starting from the innermost element -- and "bubbling" up to outer elements.

DOM - Document Object Model:
  The DOM (or Document Object Model) is a tree-like representation of the contents of a web page - a tree of "nodes" with different relationships depending on how they're arranged in the HTML document.
    <div id="container">
      <div class="display"></div>
      <div class="controls"></div>
    </div>
  in the above example, the <div class="display"></div> is a "child" of <div id="container"></div> and a sibling to <div class="controls"></div>. Think of it like a family tree. <div id="container"></div> is a parent, with it's children on the next level, each on their own "branch".

Targeting Nodes with Selectors:
  When working with the DOm, you use "selectors" to target the nodes you want to work with. You can use a combination of CSS-style selectors and relationship properties to target the nodes you want. Let's start with CSS-style selectors. In the above example, you could use the following selectors to refer to <div class="display"></div>:
    div.display
    .display
    container>.display
    div#container>.display
  You can also use relational selectors (i.e. firstChild or lastSibling etc.) with special properties owned by the nodes.
    const container = document.querySelector('#container');
    // select the #container div (don't worry about the syntax, we'll get there)
    console.dir(container.firstChild);
    // select the first child of #container => .display
    const controls = document.querySelector('.controls');
    // select the .controls div
    console.dir(controls.previousSibling);
    // select the prior sibling => .display

  So you're identifying a certain node based on its relationships to the nodes around it.

DOM methods:
  When your HTML code is parsed by a web browser, it is converted to the DOM as was mentioned above. One of the primary differences is that these nodes are objects that have many properties and methods attached to them. These properties and methods are the primary tools we are going to use to manipulate our web page with JavaScript. We'll start with the query selectors - those that help you target nodes.

  Query Selectors
    element.querySelector(selector) returns reference to the first match of selector
    element.querySelectorAll(selectors) returns a "nodelist" containing references to all of the matches of the selectors *There are several other, more specific queries, that offer potential (marginal) performance benefits, but we won't be going over them now.

  It's  important to note that when using querySelectorAll, the return value is not an array. It looks like an array, and it somewhat acts like an array, but it's really a "nodelist". The big distinction is that several array methods are missing from nodelists. One solution, if problems arise, is to conver the nodelist into an array. You can do this with Array.from() or the spread operator.

  Element Creation
    document.createElement(tagName[,options]) creates a new element of tag type tagName. [options] in this case means you can add some optional parameters to the function. Don't worry about these at this point.
      const div = document.createElement('div');
    This function does NOT put your new element into the DOM - it simply creates it in memory. THis is so that you can manipulate the element (by adding styles, classes, ids, text, etc.) before placing it on the page. You can place the element into the DOM with one of the following methods.

  Append Elements
    parentNode.appendChild(childNode) appends childNode as the last child of parentNode
    parentNode.InsertBefore(newNode, referenceNode) inserts newNode into parentNode before referenceNode

  Remove Elements
    parentNode.removeChild(child) removes child from parentNode on the DOM and returns reference to child

  Altering Elements
    When you have a reference to an element, you can use that reference to alter the element's own properties. This allows you to do many useful alterations, like adding/removing and altering attributes, changing classes, adding inline style information and more.
      const div = document.createElement('div');
      // create a new div reference in the variable 'div'

  Adding inline style
    div.style.color = 'blue';
    // adds the indicated style rule
    div.style.cssText = 'color: blue; background: white';
    // adds several style rules
    div.setAttribute('style', 'color: blue; background: white');
    // adds several style rules

    See DOM Enlightment's section on CSS Style rules (http://domenlightenment.com/#6.2) for more info on inline styles.

    Generally, style rules are the same as in CSS with the exception that hyphenated rules are changed to camelCase. i.e. "background-color" becomes "backgroundColor".

  Editing Attributes
    div.setAttribute('id', 'theDiv');
    // if id exists update it to 'theDiv' else create an id with value 'theDiv'
    div.getAttribute('id');
    // returns value of specified attribute, in this case 'theDiv'
    div.removeAttribute('id');
    // removes specified attribute

    See MDN's section on HTML Attributes (https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes) for more info on available attributes.

  Working with classes
    div.classList.add('new');
    // adds class 'new' to your new div
    div.classList.remove('new');
    // remove 'new' class from div
    div.classList.toggle('active');
    // if div doesn't have class 'active' then add it, or, if it does, then remove it

    It is often standard (and cleaner) to toggle a CSS style rather than adding and remove inline CSS.

  Adding text content
    div.textContent = 'Hello World!'
    // creates a text node containing "Hello World!" and inserts it in div
    div.innerHTML = '<span>Hello World!</span>';
    // renders the html inside div

    *Note that textContent is preferable for adding text, and innerHTML should be used sparingly as it can create security risks if misused.

    Let's take a minute to review what we've covered and give you a chance to practice this stuff before moving on. Check out this example of creating and appending a DOM element to a webpage.

    // your html file:
    <body>
      <h1>
        THE TITLE OF YOUR WEBPAGE
      </h1>
      <div id="container"></div>
    </body>
    // your JavaScript file
    const container = document.querySelector('#container');
    cosnt content = document.createElement('div');
    content.classList.add('content');
    content.textContent = 'This is the glorious text-content!';
    container.appendChild(content);

    In the JavaScript file, first we get a reference to the container div that already exists in our HTML. Then we create a new div and store it in the variable content. We add a class and some text to the content div and finally append that div to container. All in all it's a simple process. After the JavaScript code is run, our DOM tree will look like this:

    // The DOM
    <body>
      <h1>
        THE TITLE OF YOUR WEB PAGE
      </h1>
      <div id="container">
        <div class="content">
          This is the glorious text-content!
        </div>
      </div>
    </body>

    Keep in mind that the JavaScript does not alter your HTML, but the DOM - your HTML file will look the same, but the JavaScript changes what the browser renders,

Exercise
  Copy the example above into your files on your own computer. T make it work you'll need to supply the rest of the HTML skeleton and either link your javascript file, or put the javascript into a script tag on the page. Make sure everything is working before moving on.

  Add the following elements to the container using ONLY javascript - do not add any HTML or CSS code.
    1. a <p> with red text that says "Hey I'm red!"
    2. an <h3> with blue text that says "I'm blue h3!"
    3. a <div> with a black border and pink background color with the following elements inside of it:
      1. another <h1> that says "I"m in a div"
      2. a <p> that says "ME TOO!"
      3. Hint for this one: after creating the div with createElement, append the <h1> and <p> to it before adding it to the container.

Events
  Now that we have a handle on manipulating the DOM with JavaScript, the next step is learning how to make that happen dynamically, or on demand! Events are how you make that magic happen on your pages. Events are actions that occur on your web page such as mouse-clicks or keypresses, and using JavaScript we can make our webpage listen and react to these events.

  There are three primary ways to go about this: you can attach function attributes directly on your HTML elements, you can set the "on_event_" property on the DOM object in your JavaScript, or you can attach even listeners to the nodes in your JavaScript. Even listeners are definitely the preferred method, but you will regularly see the other in use, so we're going to cover all three.

  (Continue notes on html/script documents)

  Attaching listeners to groups of nodes
    This might seem like a lot of code if you're attaching lots of similar event listeners to many elements. There's a few ways to go about doing that more efficiently. We learned above that we can get a nodelist of all of the items matching a specific selector with querySelectorAll('selector'). In order to add a listener to each of them we simply need to iterate through the whole list like so:
      (Refer to html/script file)

  This is just the top of the iceberg when it comes to DOM manipulation and event handling, but it's enough to get you started with some exercises. In our exmples so far we have been using the 'click' event exclusively, but there are many more available to you.

  Some useful events include:
    click
    dblclick
    keypress
    keydown
    keyup

  You can find a more complete list with explanations of each event on this page (https://www.w3schools.com/jsref/dom_obj_event.asp).

Practice
  Manipulating web pages is the primary benefit of the JavaScript language! These techniques are things that you are likely to be messing with every day as a front-end developer, so let’s practice!

  1. Do the first exercise in Wes Bos’s JavaScript30 program by cloning the repo at https://github.com/wesbos/JavaScript30. Check out the Video Tutorial (https://www.youtube.com/watch?v=VuN8qwZoego) for instructions on the project.
  2. Go back to your “Rock Paper Scissors” game from a previous lesson and give it a simple UI so that the player can play the game by clicking on buttons rather than typing their answer in a prompt.
    1. Copy your original code into a new file so you don’t lose it.
    2. For now, remove the logic that plays exactly five rounds.
    3. Create three buttons, one for each selection. Add an event listener to the buttons that calls your playRound function with the correct playerSelection every time a button is clicked. (you can keep the console.logs for this step)
    4. Add a div for displaying results and change all of your console.logs into DOM methods.
    5. Display the running score, and announce a winner of the game once one player reaches 5 points.
    6. You will likely have to refactor (rework/rewrite) your original code to make it work for this. That’s OK! Reworking old code is an important part of the programmer’s life.
    7. Don’t forget to go back and add your new version to the original Rock Paper Scissors Project!
